
uberlogger-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004888  08004888  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004888  08004888  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004888  08004888  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000010  080048a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080048a0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ef8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6d  00000000  00000000  00029f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014abd  00000000  00000000  0002d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b480  00000000  00000000  00041bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008243b  00000000  00000000  0004d035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  000cf4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080047f4 	.word	0x080047f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	080047f4 	.word	0x080047f4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// Successfully transmitted values. Set data ready pin to low a
//	MainState = MAIN_ADC_START;
	spiDone = 1;
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <HAL_SPI_TxRxCpltCallback+0x18>)
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]
}
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	46bd      	mov	sp, r7
 800022a:	b002      	add	sp, #8
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000208 	.word	0x20000208

08000234 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800023c:	f000 fb6c 	bl	8000918 <Error_Handler>
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
	MainState = MAIN_SPI_START;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <HAL_ADC_ConvCpltCallback+0x18>)
 8000252:	2205      	movs	r2, #5
 8000254:	701a      	strb	r2, [r3, #0]

}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t aTxBuffer[BUFFERSIZE];
	uint8_t aRxBuffer[BUFFERSIZE];
	uint8_t i = 0;
 800026a:	230f      	movs	r3, #15
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 fd53 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f8cd 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f9eb 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 800027e:	f000 f9c3 	bl	8000608 <MX_DMA_Init>
  MX_ADC1_Init();
 8000282:	f000 f91b 	bl	80004bc <MX_ADC1_Init>
  MX_SPI1_Init();
 8000286:	f000 f985 	bl	8000594 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DATA_RDY_GPIO_Port, DATA_RDY_Pin, GPIO_PIN_RESET);
 800028a:	4b5b      	ldr	r3, [pc, #364]	; (80003f8 <main+0x194>)
 800028c:	2200      	movs	r2, #0
 800028e:	2110      	movs	r1, #16
 8000290:	0018      	movs	r0, r3
 8000292:	f002 fab8 	bl	8002806 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_RDY_DUP_GPIO_Port, DATA_RDY_DUP_Pin, GPIO_PIN_RESET);
 8000296:	4b58      	ldr	r3, [pc, #352]	; (80003f8 <main+0x194>)
 8000298:	2200      	movs	r2, #0
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	0018      	movs	r0, r3
 800029e:	f002 fab2 	bl	8002806 <HAL_GPIO_WritePin>
  aTxBuffer[0] = 0x01;
 80002a2:	2108      	movs	r1, #8
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1] = 0x02;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2202      	movs	r2, #2
 80002ae:	705a      	strb	r2, [r3, #1]

  HAL_ADCEx_Calibration_Start(&hadc1);
 80002b0:	4b52      	ldr	r3, [pc, #328]	; (80003fc <main+0x198>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fd20 	bl	8001cf8 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(MainState)
 80002b8:	4b51      	ldr	r3, [pc, #324]	; (8000400 <main+0x19c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b06      	cmp	r3, #6
 80002be:	d900      	bls.n	80002c2 <main+0x5e>
 80002c0:	e091      	b.n	80003e6 <main+0x182>
 80002c2:	009a      	lsls	r2, r3, #2
 80002c4:	4b4f      	ldr	r3, [pc, #316]	; (8000404 <main+0x1a0>)
 80002c6:	18d3      	adds	r3, r2, r3
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	469f      	mov	pc, r3
		  {
		  	  case MAIN_IDLE:
		  		if (HAL_GPIO_ReadPin(ADC_EN_GPIO_Port, ADC_EN_Pin) != GPIO_PIN_SET )
 80002cc:	4b4a      	ldr	r3, [pc, #296]	; (80003f8 <main+0x194>)
 80002ce:	2120      	movs	r1, #32
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fa7b 	bl	80027cc <HAL_GPIO_ReadPin>
 80002d6:	0003      	movs	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d007      	beq.n	80002ec <main+0x88>
		  		{
		  		  Idle_Handler(aTxBuffer, aRxBuffer);
 80002dc:	003a      	movs	r2, r7
 80002de:	2308      	movs	r3, #8
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0011      	movs	r1, r2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fa9d 	bl	8000824 <Idle_Handler>
		  		} else {
		  			MainState = MAIN_ADC_START;
		  		}
		  		  break;
 80002ea:	e084      	b.n	80003f6 <main+0x192>
		  			MainState = MAIN_ADC_START;
 80002ec:	4b44      	ldr	r3, [pc, #272]	; (8000400 <main+0x19c>)
 80002ee:	2203      	movs	r2, #3
 80002f0:	701a      	strb	r2, [r3, #0]
		  		  break;
 80002f2:	e080      	b.n	80003f6 <main+0x192>

		  	  case MAIN_CONFIG:
		  		  Config_Handler(aTxBuffer, aRxBuffer);
 80002f4:	003a      	movs	r2, r7
 80002f6:	2308      	movs	r3, #8
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fa39 	bl	8000774 <Config_Handler>
		  		  break;
 8000302:	e078      	b.n	80003f6 <main+0x192>

		  	  case MAIN_ADC_START:
		  		  // When SPI is done sending/receiving, it sets the state to MAIN_IDLE. Quickly switch to MAIN_ADC_START in case we are still logging.
				  if (HAL_GPIO_ReadPin(ADC_EN_GPIO_Port, ADC_EN_Pin) != GPIO_PIN_SET )
 8000304:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <main+0x194>)
 8000306:	2120      	movs	r1, #32
 8000308:	0018      	movs	r0, r3
 800030a:	f002 fa5f 	bl	80027cc <HAL_GPIO_ReadPin>
 800030e:	0003      	movs	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d003      	beq.n	800031c <main+0xb8>
				  {
					  MainState = MAIN_IDLE;
 8000314:	4b3a      	ldr	r3, [pc, #232]	; (8000400 <main+0x19c>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]

		  				MainState = MAIN_ADC_CONVERTING;
		  			}
		  		}

		  		  break;
 800031a:	e067      	b.n	80003ec <main+0x188>
		  			HAL_GPIO_WritePin(DATA_RDY_GPIO_Port, DATA_RDY_Pin, GPIO_PIN_RESET);
 800031c:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <main+0x194>)
 800031e:	2200      	movs	r2, #0
 8000320:	2110      	movs	r1, #16
 8000322:	0018      	movs	r0, r3
 8000324:	f002 fa6f 	bl	8002806 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(DATA_RDY_DUP_GPIO_Port, DATA_RDY_DUP_Pin, GPIO_PIN_RESET);
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <main+0x194>)
 800032a:	2200      	movs	r2, #0
 800032c:	2140      	movs	r1, #64	; 0x40
 800032e:	0018      	movs	r0, r3
 8000330:	f002 fa69 	bl	8002806 <HAL_GPIO_WritePin>
		  			if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)aADCxConvertedData, 3) == HAL_OK)
 8000334:	4934      	ldr	r1, [pc, #208]	; (8000408 <main+0x1a4>)
 8000336:	4b31      	ldr	r3, [pc, #196]	; (80003fc <main+0x198>)
 8000338:	2203      	movs	r2, #3
 800033a:	0018      	movs	r0, r3
 800033c:	f001 f874 	bl	8001428 <HAL_ADC_Start_DMA>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d153      	bne.n	80003ec <main+0x188>
		  				MainState = MAIN_ADC_CONVERTING;
 8000344:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <main+0x19c>)
 8000346:	2204      	movs	r2, #4
 8000348:	701a      	strb	r2, [r3, #0]
		  		  break;
 800034a:	e04f      	b.n	80003ec <main+0x188>

		  	  case MAIN_SPI_START:
		  		// Copy result
				for (i=0; i<(BUFFERSIZE/2); i++)
 800034c:	230f      	movs	r3, #15
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
 8000354:	e01d      	b.n	8000392 <main+0x12e>
				{
		    		aTxBuffer[i] = (uint8_t) aADCxConvertedData[i];
 8000356:	200f      	movs	r0, #15
 8000358:	183b      	adds	r3, r7, r0
 800035a:	781a      	ldrb	r2, [r3, #0]
 800035c:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <main+0x1a4>)
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	5ad2      	ldrh	r2, [r2, r3]
 8000362:	183b      	adds	r3, r7, r0
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2d1      	uxtb	r1, r2
 8000368:	2408      	movs	r4, #8
 800036a:	193a      	adds	r2, r7, r4
 800036c:	54d1      	strb	r1, [r2, r3]
		    		aTxBuffer[i+1] = (uint8_t) (aADCxConvertedData[i] >> 8);
 800036e:	183b      	adds	r3, r7, r0
 8000370:	781a      	ldrb	r2, [r3, #0]
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <main+0x1a4>)
 8000374:	0052      	lsls	r2, r2, #1
 8000376:	5ad3      	ldrh	r3, [r2, r3]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	b29a      	uxth	r2, r3
 800037c:	183b      	adds	r3, r7, r0
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	b2d1      	uxtb	r1, r2
 8000384:	193a      	adds	r2, r7, r4
 8000386:	54d1      	strb	r1, [r2, r3]
				for (i=0; i<(BUFFERSIZE/2); i++)
 8000388:	183b      	adds	r3, r7, r0
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	183b      	adds	r3, r7, r0
 800038e:	3201      	adds	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	230f      	movs	r3, #15
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d9dc      	bls.n	8000356 <main+0xf2>
	//				aTxBuffer[i] = i;
				}

				uint8_t retVal = HAL_SPI_TransmitReceive_DMA(&hspi1,  (uint8_t*) aTxBuffer, (uint8_t*) aRxBuffer,  BUFFERSIZE);
 800039c:	250e      	movs	r5, #14
 800039e:	197c      	adds	r4, r7, r5
 80003a0:	003a      	movs	r2, r7
 80003a2:	2308      	movs	r3, #8
 80003a4:	18f9      	adds	r1, r7, r3
 80003a6:	4819      	ldr	r0, [pc, #100]	; (800040c <main+0x1a8>)
 80003a8:	2306      	movs	r3, #6
 80003aa:	f003 fd77 	bl	8003e9c <HAL_SPI_TransmitReceive_DMA>
 80003ae:	0003      	movs	r3, r0
 80003b0:	7023      	strb	r3, [r4, #0]
				if(retVal == HAL_OK)
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11a      	bne.n	80003f0 <main+0x18c>
				{
					MainState = MAIN_SPI_BUSY;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <main+0x19c>)
 80003bc:	2206      	movs	r2, #6
 80003be:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(DATA_RDY_GPIO_Port, DATA_RDY_Pin, GPIO_PIN_SET);
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <main+0x194>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	2110      	movs	r1, #16
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 fa1d 	bl	8002806 <HAL_GPIO_WritePin>
				}
	//			}  else { /* Transfer error in transmission process */
	//			  Error_Handler();
	//			}

				break;
 80003cc:	e010      	b.n	80003f0 <main+0x18c>

		  	  case MAIN_SPI_BUSY:
		  	  case MAIN_ADC_CONVERTING:
		  		  if(spiDone)
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main+0x1ac>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00d      	beq.n	80003f4 <main+0x190>
		  		  {
		  			  spiDone = 0;
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <main+0x1ac>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
		  			  MainState = MAIN_ADC_START;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <main+0x19c>)
 80003e0:	2203      	movs	r2, #3
 80003e2:	701a      	strb	r2, [r3, #0]
		  		  }
			  break;
 80003e4:	e006      	b.n	80003f4 <main+0x190>

		      default :
		        Error_Handler();
 80003e6:	f000 fa97 	bl	8000918 <Error_Handler>
		      break;
 80003ea:	e004      	b.n	80003f6 <main+0x192>
		  		  break;
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	e763      	b.n	80002b8 <main+0x54>
				break;
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	e761      	b.n	80002b8 <main+0x54>
			  break;
 80003f4:	46c0      	nop			; (mov r8, r8)
	  switch(MainState)
 80003f6:	e75f      	b.n	80002b8 <main+0x54>
 80003f8:	50000400 	.word	0x50000400
 80003fc:	2000002c 	.word	0x2000002c
 8000400:	20000000 	.word	0x20000000
 8000404:	0800480c 	.word	0x0800480c
 8000408:	2000020c 	.word	0x2000020c
 800040c:	200000ec 	.word	0x200000ec
 8000410:	20000208 	.word	0x20000208

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b093      	sub	sp, #76	; 0x4c
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2414      	movs	r4, #20
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2334      	movs	r3, #52	; 0x34
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f004 f9dd 	bl	80047e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	0018      	movs	r0, r3
 800042e:	2310      	movs	r3, #16
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f004 f9d6 	bl	80047e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f002 f9ff 	bl	8002840 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2201      	movs	r2, #1
 8000446:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	0252      	lsls	r2, r2, #9
 800044e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	0021      	movs	r1, r4
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2202      	movs	r2, #2
 8000456:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2203      	movs	r2, #3
 800045c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2210      	movs	r2, #16
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	0292      	lsls	r2, r2, #10
 8000470:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	0592      	lsls	r2, r2, #22
 8000478:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	187b      	adds	r3, r7, r1
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fa1f 	bl	80028c0 <HAL_RCC_OscConfig>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000486:	f000 fa47 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2207      	movs	r2, #7
 800048e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2202      	movs	r2, #2
 8000494:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2102      	movs	r1, #2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fd1a 	bl	8002ee0 <HAL_RCC_ClockConfig>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004b0:	f000 fa32 	bl	8000918 <Error_Handler>
  }
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b013      	add	sp, #76	; 0x4c
 80004ba:	bd90      	pop	{r4, r7, pc}

080004bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	0018      	movs	r0, r3
 80004c6:	230c      	movs	r3, #12
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f004 f98a 	bl	80047e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d0:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <MX_ADC1_Init+0xd0>)
 80004d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004d8:	22e0      	movs	r2, #224	; 0xe0
 80004da:	0352      	lsls	r2, r2, #13
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e4:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004fc:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_ADC1_Init+0xcc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000504:	2200      	movs	r2, #0
 8000506:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ADC1_Init+0xcc>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000510:	2220      	movs	r2, #32
 8000512:	2100      	movs	r1, #0
 8000514:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000518:	2200      	movs	r2, #0
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_ADC1_Init+0xcc>)
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000524:	222c      	movs	r2, #44	; 0x2c
 8000526:	2101      	movs	r1, #1
 8000528:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0xcc>)
 800052c:	2200      	movs	r2, #0
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000532:	2200      	movs	r2, #0
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0xcc>)
 800053e:	223c      	movs	r2, #60	; 0x3c
 8000540:	2100      	movs	r1, #0
 8000542:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000546:	2200      	movs	r2, #0
 8000548:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0xcc>)
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fdc3 	bl	80010d8 <HAL_ADC_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000556:	f000 f9df 	bl	8000918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <MX_ADC1_Init+0xd4>)
 800055e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_ADC1_Init+0xcc>)
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fff6 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800057c:	f000 f9cc 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b004      	add	sp, #16
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000002c 	.word	0x2000002c
 800058c:	40012400 	.word	0x40012400
 8000590:	08000004 	.word	0x08000004

08000594 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_SPI1_Init+0x6c>)
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <MX_SPI1_Init+0x70>)
 800059c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005ac:	22e0      	movs	r2, #224	; 0xe0
 80005ae:	00d2      	lsls	r2, r2, #3
 80005b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005da:	2207      	movs	r2, #7
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_SPI1_Init+0x6c>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 ff27 	bl	8003440 <HAL_SPI_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80005f6:	f000 f98f 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000ec 	.word	0x200000ec
 8000604:	40013000 	.word	0x40013000

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DMA_Init+0x48>)
 8000610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DMA_Init+0x48>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	639a      	str	r2, [r3, #56]	; 0x38
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA_Init+0x48>)
 800061c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2009      	movs	r0, #9
 800062c:	f001 fce6 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000630:	2009      	movs	r0, #9
 8000632:	f001 fcf8 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200a      	movs	r0, #10
 800063c:	f001 fcde 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000640:	200a      	movs	r0, #10
 8000642:	f001 fcf0 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	2414      	movs	r4, #20
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2314      	movs	r3, #20
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 f8bd 	bl	80047e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <MX_GPIO_Init+0x110>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <MX_GPIO_Init+0x110>)
 8000670:	2120      	movs	r1, #32
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <MX_GPIO_Init+0x110>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	2220      	movs	r2, #32
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <MX_GPIO_Init+0x110>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <MX_GPIO_Init+0x110>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_GPIO_Init+0x110>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b32      	ldr	r3, [pc, #200]	; (8000764 <MX_GPIO_Init+0x110>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <MX_GPIO_Init+0x110>)
 80006a0:	2102      	movs	r1, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_GPIO_Init+0x110>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	2202      	movs	r2, #2
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_GPIO_Init+0x110>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0x110>)
 80006b8:	2108      	movs	r1, #8
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_GPIO_Init+0x110>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2208      	movs	r2, #8
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA_RDY_Pin|DATA_RDY_DUP_Pin, GPIO_PIN_RESET);
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_GPIO_Init+0x114>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2150      	movs	r1, #80	; 0x50
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 f898 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 ADC_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	4a24      	ldr	r2, [pc, #144]	; (800076c <MX_GPIO_Init+0x118>)
 80006da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|ADC_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_GPIO_Init+0x114>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f001 ff08 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIN_RANGE_SELECT_CLK_Pin */
  GPIO_InitStruct.Pin = AIN_RANGE_SELECT_CLK_Pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0212      	lsls	r2, r2, #8
 80006fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2203      	movs	r2, #3
 8000700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AIN_RANGE_SELECT_CLK_GPIO_Port, &GPIO_InitStruct);
 8000708:	193a      	adds	r2, r7, r4
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fef7 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN_RANGE_SELECT_CLR_Pin AIN_PULLUP_SELECT_CLK_Pin AIN_PULLUP_SELECT_CLR_Pin */
  GPIO_InitStruct.Pin = AIN_RANGE_SELECT_CLR_Pin|AIN_PULLUP_SELECT_CLK_Pin|AIN_PULLUP_SELECT_CLR_Pin;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2203      	movs	r2, #3
 8000720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	193b      	adds	r3, r7, r4
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <MX_GPIO_Init+0x11c>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f001 fee8 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_RDY_Pin DATA_RDY_DUP_Pin */
  GPIO_InitStruct.Pin = DATA_RDY_Pin|DATA_RDY_DUP_Pin;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2250      	movs	r2, #80	; 0x50
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	187b      	adds	r3, r7, r1
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <MX_GPIO_Init+0x114>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f001 fed5 	bl	8002504 <HAL_GPIO_Init>

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	; 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400
 800076c:	0000fc20 	.word	0x0000fc20
 8000770:	50000c00 	.word	0x50000c00

08000774 <Config_Handler>:

/* USER CODE BEGIN 4 */
void Config_Handler(uint8_t* aTxBuffer, uint8_t* aRxBuffer)
{
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t retVal;
	retVal = HAL_SPI_Receive(&hspi1,  (uint8_t *)aRxBuffer, 1, 1000);
 800077e:	250f      	movs	r5, #15
 8000780:	197c      	adds	r4, r7, r5
 8000782:	23fa      	movs	r3, #250	; 0xfa
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	6839      	ldr	r1, [r7, #0]
 8000788:	4823      	ldr	r0, [pc, #140]	; (8000818 <Config_Handler+0xa4>)
 800078a:	2201      	movs	r2, #1
 800078c:	f003 f868 	bl	8003860 <HAL_SPI_Receive>
 8000790:	0003      	movs	r3, r0
 8000792:	7023      	strb	r3, [r4, #0]
	  if( retVal == HAL_ERROR)
 8000794:	197b      	adds	r3, r7, r5
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d102      	bne.n	80007a2 <Config_Handler+0x2e>
	  {
		  /* Transfer error in transmission process */
		  Error_Handler();
 800079c:	f000 f8bc 	bl	8000918 <Error_Handler>
			  default:
				 Send_NOK();

		  }
	  }
}
 80007a0:	e035      	b.n	800080e <Config_Handler+0x9a>
	  else if (retVal == HAL_OK)
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d12b      	bne.n	8000804 <Config_Handler+0x90>
		  switch(aRxBuffer[0])
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d824      	bhi.n	80007fe <Config_Handler+0x8a>
 80007b4:	009a      	lsls	r2, r3, #2
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <Config_Handler+0xa8>)
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	469f      	mov	pc, r3
				retVal = HAL_SPI_Receive(&hspi1,  (uint8_t *)aRxBuffer, 1, 1000);
 80007be:	250f      	movs	r5, #15
 80007c0:	197c      	adds	r4, r7, r5
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	6839      	ldr	r1, [r7, #0]
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <Config_Handler+0xa4>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	f003 f848 	bl	8003860 <HAL_SPI_Receive>
 80007d0:	0003      	movs	r3, r0
 80007d2:	7023      	strb	r3, [r4, #0]
				if (Config_Set_Sample_freq(retVal))
 80007d4:	197b      	adds	r3, r7, r5
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f85d 	bl	8000898 <Config_Set_Sample_freq>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d002      	beq.n	80007e8 <Config_Handler+0x74>
					Send_OK();
 80007e2:	f000 f865 	bl	80008b0 <Send_OK>
			  break;
 80007e6:	e012      	b.n	800080e <Config_Handler+0x9a>
					Send_NOK();
 80007e8:	f000 f87c 	bl	80008e4 <Send_NOK>
			  break;
 80007ec:	e00f      	b.n	800080e <Config_Handler+0x9a>
				  if (Send_OK())
 80007ee:	f000 f85f 	bl	80008b0 <Send_OK>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d00a      	beq.n	800080c <Config_Handler+0x98>
					  MainState = MAIN_IDLE;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <Config_Handler+0xac>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
				  break;
 80007fc:	e006      	b.n	800080c <Config_Handler+0x98>
				 Send_NOK();
 80007fe:	f000 f871 	bl	80008e4 <Send_NOK>
}
 8000802:	e004      	b.n	800080e <Config_Handler+0x9a>
	  }
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	e002      	b.n	800080e <Config_Handler+0x9a>
				  break;
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	e000      	b.n	800080e <Config_Handler+0x9a>
				  break;
 800080c:	46c0      	nop			; (mov r8, r8)
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bdb0      	pop	{r4, r5, r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	200000ec 	.word	0x200000ec
 800081c:	08004828 	.word	0x08004828
 8000820:	20000000 	.word	0x20000000

08000824 <Idle_Handler>:
{

}

void Idle_Handler(uint8_t* aTxBuffer, uint8_t* aRxBuffer)
{
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	uint8_t retVal;

	// Blocking SPI read with 1000 clock cycles timeout.
	retVal = HAL_SPI_Receive(&hspi1,  (uint8_t *)aRxBuffer, 1, 1000);
 800082e:	250f      	movs	r5, #15
 8000830:	197c      	adds	r4, r7, r5
 8000832:	23fa      	movs	r3, #250	; 0xfa
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <Idle_Handler+0x6c>)
 800083a:	2201      	movs	r2, #1
 800083c:	f003 f810 	bl	8003860 <HAL_SPI_Receive>
 8000840:	0003      	movs	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]
	if( retVal == HAL_ERROR)
 8000844:	197b      	adds	r3, r7, r5
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d102      	bne.n	8000852 <Idle_Handler+0x2e>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 800084c:	f000 f864 	bl	8000918 <Error_Handler>
		  default:
			Send_NOK();

	  }
	}
}
 8000850:	e01a      	b.n	8000888 <Idle_Handler+0x64>
	else if (retVal == HAL_OK)
 8000852:	230f      	movs	r3, #15
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d110      	bne.n	800087e <Idle_Handler+0x5a>
	  switch(aRxBuffer[0])
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00e      	beq.n	8000882 <Idle_Handler+0x5e>
 8000864:	2b03      	cmp	r3, #3
 8000866:	d107      	bne.n	8000878 <Idle_Handler+0x54>
			  if (Send_OK())
 8000868:	f000 f822 	bl	80008b0 <Send_OK>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d00a      	beq.n	8000886 <Idle_Handler+0x62>
				MainState = MAIN_CONFIG;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <Idle_Handler+0x70>)
 8000872:	2202      	movs	r2, #2
 8000874:	701a      	strb	r2, [r3, #0]
		  break;
 8000876:	e006      	b.n	8000886 <Idle_Handler+0x62>
			Send_NOK();
 8000878:	f000 f834 	bl	80008e4 <Send_NOK>
}
 800087c:	e004      	b.n	8000888 <Idle_Handler+0x64>
	}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	e002      	b.n	8000888 <Idle_Handler+0x64>
			  break;
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	e000      	b.n	8000888 <Idle_Handler+0x64>
		  break;
 8000886:	46c0      	nop			; (mov r8, r8)
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b004      	add	sp, #16
 800088e:	bdb0      	pop	{r4, r5, r7, pc}
 8000890:	200000ec 	.word	0x200000ec
 8000894:	20000000 	.word	0x20000000

08000898 <Config_Set_Sample_freq>:

uint8_t Config_Set_Sample_freq(uint8_t sampleFreq)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	701a      	strb	r2, [r3, #0]
	return 1;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <Send_OK>:
uint8_t Send_OK(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint8_t t = RESP_OK;
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
	if (HAL_SPI_Transmit(&hspi1, &t, 1, 20000) == HAL_OK)
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <Send_OK+0x2c>)
 80008be:	1df9      	adds	r1, r7, #7
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <Send_OK+0x30>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	f002 fe74 	bl	80035b0 <HAL_SPI_Transmit>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d101      	bne.n	80008d0 <Send_OK+0x20>
	{
		return 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e000      	b.n	80008d2 <Send_OK+0x22>
	} else {
		return 0;
 80008d0:	2300      	movs	r3, #0
	}
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	00004e20 	.word	0x00004e20
 80008e0:	200000ec 	.word	0x200000ec

080008e4 <Send_NOK>:
uint8_t Send_NOK(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	uint8_t t = RESP_NOK;
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	2202      	movs	r2, #2
 80008ee:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit(&hspi1, &t, 1, 20000) == HAL_OK)
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <Send_NOK+0x2c>)
 80008f2:	1df9      	adds	r1, r7, #7
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <Send_NOK+0x30>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	f002 fe5a 	bl	80035b0 <HAL_SPI_Transmit>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d101      	bne.n	8000904 <Send_NOK+0x20>
		{
			return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <Send_NOK+0x22>
		} else {
			return 0;
 8000904:	2300      	movs	r3, #0
		}
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	00004e20 	.word	0x00004e20
 8000914:	200000ec 	.word	0x200000ec

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	641a      	str	r2, [r3, #64]	; 0x40
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0549      	lsls	r1, r1, #21
 800094c:	430a      	orrs	r2, r1
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_MspInit+0x44>)
 8000952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	055b      	lsls	r3, r3, #21
 8000958:	4013      	ands	r3, r2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b091      	sub	sp, #68	; 0x44
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	232c      	movs	r3, #44	; 0x2c
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f003 ff30 	bl	80047e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	2414      	movs	r4, #20
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2318      	movs	r3, #24
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 ff28 	bl	80047e4 <memset>
  if(hadc->Instance==ADC1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <HAL_ADC_MspInit+0x13c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d000      	beq.n	80009a0 <HAL_ADC_MspInit+0x34>
 800099e:	e07f      	b.n	8000aa0 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	01d2      	lsls	r2, r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 fc1f 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80009ba:	f7ff ffad 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0349      	lsls	r1, r1, #13
 80009c8:	430a      	orrs	r2, r1
 80009ca:	641a      	str	r2, [r3, #64]	; 0x40
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	035b      	lsls	r3, r3, #13
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_ADC_MspInit+0x140>)
 80009f8:	2102      	movs	r1, #2
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_ADC_MspInit+0x140>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2202      	movs	r2, #2
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a0a:	242c      	movs	r4, #44	; 0x2c
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2203      	movs	r2, #3
 8000a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	193a      	adds	r2, r7, r4
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f001 fd6c 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2207      	movs	r2, #7
 8000a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2203      	movs	r2, #3
 8000a36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_ADC_MspInit+0x144>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f001 fd5d 	bl	8002504 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_ADC_MspInit+0x14c>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a52:	2205      	movs	r2, #5
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0052      	lsls	r2, r2, #1
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	00d2      	lsls	r2, r2, #3
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 faea 	bl	8002060 <HAL_DMA_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000a90:	f7ff ff42 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a98:	651a      	str	r2, [r3, #80]	; 0x50
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_ADC_MspInit+0x148>)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b011      	add	sp, #68	; 0x44
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	40012400 	.word	0x40012400
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	50000400 	.word	0x50000400
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	40020030 	.word	0x40020030

08000abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 fe88 	bl	80047e4 <memset>
  if(hspi->Instance==SPI1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a56      	ldr	r2, [pc, #344]	; (8000c34 <HAL_SPI_MspInit+0x178>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d000      	beq.n	8000ae0 <HAL_SPI_MspInit+0x24>
 8000ade:	e0a4      	b.n	8000c2a <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae0:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae4:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0149      	lsls	r1, r1, #5
 8000aea:	430a      	orrs	r2, r1
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
 8000aee:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	015b      	lsls	r3, r3, #5
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b4e      	ldr	r3, [pc, #312]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34
 8000b08:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b18:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b20:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <HAL_SPI_MspInit+0x17c>)
 8000b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b24:	2202      	movs	r2, #2
 8000b26:	4013      	ands	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	22c0      	movs	r2, #192	; 0xc0
 8000b30:	0152      	lsls	r2, r2, #5
 8000b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2202      	movs	r2, #2
 8000b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	193a      	adds	r2, r7, r4
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f001 fcd5 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	0021      	movs	r1, r4
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2208      	movs	r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <HAL_SPI_MspInit+0x180>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f001 fcbf 	bl	8002504 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <HAL_SPI_MspInit+0x188>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fa4e 	bl	8002060 <HAL_DMA_Init>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000bc8:	f7ff fea6 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bd0:	659a      	str	r2, [r3, #88]	; 0x58
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_SPI_MspInit+0x184>)
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_SPI_MspInit+0x190>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000be0:	2211      	movs	r2, #17
 8000be2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000be6:	2210      	movs	r2, #16
 8000be8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000c04:	2220      	movs	r2, #32
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fa25 	bl	8002060 <HAL_DMA_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8000c1a:	f7ff fe7d 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000c22:	655a      	str	r2, [r3, #84]	; 0x54
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_SPI_MspInit+0x18c>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b00b      	add	sp, #44	; 0x2c
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	50000400 	.word	0x50000400
 8000c40:	20000150 	.word	0x20000150
 8000c44:	40020008 	.word	0x40020008
 8000c48:	200001ac 	.word	0x200001ac
 8000c4c:	4002001c 	.word	0x4002001c

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8bc 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <DMA1_Channel1_IRQHandler+0x14>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fafa 	bl	8002280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000150 	.word	0x20000150

08000c98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 faee 	bl	8002280 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 faea 	bl	8002280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200001ac 	.word	0x200001ac
 8000cb8:	20000090 	.word	0x20000090

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff fff6 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf6:	f003 fd51 	bl	800479c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cfa:	f7ff fab3 	bl	8000264 <main>

08000cfe <LoopForever>:

LoopForever:
  b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   r0, =_estack
 8000d00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d0c:	08004890 	.word	0x08004890
  ldr r2, =_sbss
 8000d10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d14:	20000218 	.word	0x20000218

08000d18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x3c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Init+0x3c>)
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0049      	lsls	r1, r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f810 	bl	8000d5c <HAL_InitTick>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e001      	b.n	8000d4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdec 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_InitTick+0x88>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d02b      	beq.n	8000dcc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_InitTick+0x8c>)
 8000d76:	681c      	ldr	r4, [r3, #0]
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_InitTick+0x88>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	23fa      	movs	r3, #250	; 0xfa
 8000d80:	0098      	lsls	r0, r3, #2
 8000d82:	f7ff f9bd 	bl	8000100 <__udivsi3>
 8000d86:	0003      	movs	r3, r0
 8000d88:	0019      	movs	r1, r3
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f7ff f9b8 	bl	8000100 <__udivsi3>
 8000d90:	0003      	movs	r3, r0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 f957 	bl	8002046 <HAL_SYSTICK_Config>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d112      	bne.n	8000dc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d80a      	bhi.n	8000db8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2301      	movs	r3, #1
 8000da6:	425b      	negs	r3, r3
 8000da8:	2200      	movs	r2, #0
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 f926 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_InitTick+0x90>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e00d      	b.n	8000dd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e008      	b.n	8000dd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e003      	b.n	8000dd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b005      	add	sp, #20
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	001a      	movs	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	18d2      	adds	r2, r2, r3
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_IncTick+0x20>)
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000214 	.word	0x20000214

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	20000214 	.word	0x20000214

08000e28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e38:	401a      	ands	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	fe3fffff 	.word	0xfe3fffff

08000e50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	23e0      	movs	r3, #224	; 0xe0
 8000e5e:	045b      	lsls	r3, r3, #17
 8000e60:	4013      	ands	r3, r2
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	400a      	ands	r2, r1
 8000e80:	2107      	movs	r1, #7
 8000e82:	4091      	lsls	r1, r2
 8000e84:	000a      	movs	r2, r1
 8000e86:	43d2      	mvns	r2, r2
 8000e88:	401a      	ands	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	400b      	ands	r3, r1
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4099      	lsls	r1, r3
 8000e94:	000b      	movs	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b004      	add	sp, #16
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	2107      	movs	r1, #7
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ec6:	40da      	lsrs	r2, r3
 8000ec8:	0013      	movs	r3, r2
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d101      	bne.n	8000eea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	211f      	movs	r1, #31
 8000f08:	400a      	ands	r2, r1
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	210f      	movs	r1, #15
 8000f1a:	4019      	ands	r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	201f      	movs	r0, #31
 8000f20:	4003      	ands	r3, r0
 8000f22:	4099      	lsls	r1, r3
 8000f24:	000b      	movs	r3, r1
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	035b      	lsls	r3, r3, #13
 8000f46:	0b5b      	lsrs	r3, r3, #13
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	0352      	lsls	r2, r2, #13
 8000f68:	0b52      	lsrs	r2, r2, #13
 8000f6a:	43d2      	mvns	r2, r2
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	0212      	lsls	r2, r2, #8
 8000f90:	43d2      	mvns	r2, r2
 8000f92:	401a      	ands	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	07ffff00 	.word	0x07ffff00

08000fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	0552      	lsls	r2, r2, #21
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	6fffffe8 	.word	0x6fffffe8

08000fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	401a      	ands	r2, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	055b      	lsls	r3, r3, #21
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d101      	bne.n	8000ffa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <LL_ADC_Enable+0x20>)
 8001012:	4013      	ands	r3, r2
 8001014:	2201      	movs	r2, #1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}
 8001024:	7fffffe8 	.word	0x7fffffe8

08001028 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <LL_ADC_Disable+0x20>)
 8001036:	4013      	ands	r3, r2
 8001038:	2202      	movs	r2, #2
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}
 8001048:	7fffffe8 	.word	0x7fffffe8

0800104c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <LL_ADC_IsEnabled+0x18>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_ADC_IsEnabled+0x1a>
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	2b02      	cmp	r3, #2
 8001080:	d101      	bne.n	8001086 <LL_ADC_IsDisableOngoing+0x18>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_IsDisableOngoing+0x1a>
 8001086:	2300      	movs	r3, #0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <LL_ADC_REG_StartConversion+0x20>)
 800109e:	4013      	ands	r3, r2
 80010a0:	2204      	movs	r2, #4
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	7fffffe8 	.word	0x7fffffe8

080010b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2204      	movs	r2, #4
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d101      	bne.n	80010cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	231f      	movs	r3, #31
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e17f      	b.n	80013fe <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10a      	bne.n	800111c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fc2f 	bl	800096c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2254      	movs	r2, #84	; 0x54
 8001118:	2100      	movs	r1, #0
 800111a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff5b 	bl	8000fdc <LL_ADC_IsInternalRegulatorEnabled>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d115      	bne.n	8001156 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff ff40 	bl	8000fb4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001134:	4bb4      	ldr	r3, [pc, #720]	; (8001408 <HAL_ADC_Init+0x330>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	49b4      	ldr	r1, [pc, #720]	; (800140c <HAL_ADC_Init+0x334>)
 800113a:	0018      	movs	r0, r3
 800113c:	f7fe ffe0 	bl	8000100 <__udivsi3>
 8001140:	0003      	movs	r3, r0
 8001142:	3301      	adds	r3, #1
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001148:	e002      	b.n	8001150 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3b01      	subs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff3e 	bl	8000fdc <LL_ADC_IsInternalRegulatorEnabled>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d10f      	bne.n	8001184 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	2210      	movs	r2, #16
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2201      	movs	r2, #1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800117c:	231f      	movs	r3, #31
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ff93 	bl	80010b4 <LL_ADC_REG_IsConversionOngoing>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	2210      	movs	r2, #16
 8001198:	4013      	ands	r3, r2
 800119a:	d000      	beq.n	800119e <HAL_ADC_Init+0xc6>
 800119c:	e122      	b.n	80013e4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d000      	beq.n	80011a6 <HAL_ADC_Init+0xce>
 80011a4:	e11e      	b.n	80013e4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a99      	ldr	r2, [pc, #612]	; (8001410 <HAL_ADC_Init+0x338>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	2202      	movs	r2, #2
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff46 	bl	800104c <LL_ADC_IsEnabled>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d000      	beq.n	80011c6 <HAL_ADC_Init+0xee>
 80011c4:	e0ad      	b.n	8001322 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e1b      	ldrb	r3, [r3, #24]
 80011ce:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011d0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7e5b      	ldrb	r3, [r3, #25]
 80011d6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e9b      	ldrb	r3, [r3, #26]
 80011de:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_ADC_Init+0x118>
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	e000      	b.n	80011f2 <HAL_ADC_Init+0x11a>
 80011f0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011f2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011f8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da04      	bge.n	800120c <HAL_ADC_Init+0x134>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	085b      	lsrs	r3, r3, #1
 800120a:	e001      	b.n	8001210 <HAL_ADC_Init+0x138>
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001210:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	212c      	movs	r1, #44	; 0x2c
 8001216:	5c5b      	ldrb	r3, [r3, r1]
 8001218:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800121a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2220      	movs	r2, #32
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d115      	bne.n	8001258 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e9b      	ldrb	r3, [r3, #26]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	e00b      	b.n	8001258 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	2220      	movs	r2, #32
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	2201      	movs	r2, #1
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001264:	23e0      	movs	r3, #224	; 0xe0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800126e:	4313      	orrs	r3, r2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4a65      	ldr	r2, [pc, #404]	; (8001414 <HAL_ADC_Init+0x33c>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	430a      	orrs	r2, r1
 800128a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	0f9b      	lsrs	r3, r3, #30
 8001292:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001298:	4313      	orrs	r3, r2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	223c      	movs	r2, #60	; 0x3c
 80012a4:	5c9b      	ldrb	r3, [r3, r2]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d111      	bne.n	80012ce <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	0f9b      	lsrs	r3, r3, #30
 80012b0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80012bc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80012c2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	4313      	orrs	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_ADC_Init+0x340>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d018      	beq.n	8001322 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	05db      	lsls	r3, r3, #23
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d012      	beq.n	8001322 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	429a      	cmp	r2, r3
 8001306:	d00c      	beq.n	8001322 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001308:	4b44      	ldr	r3, [pc, #272]	; (800141c <HAL_ADC_Init+0x344>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a44      	ldr	r2, [pc, #272]	; (8001420 <HAL_ADC_Init+0x348>)
 800130e:	4013      	ands	r3, r2
 8001310:	0019      	movs	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	23f0      	movs	r3, #240	; 0xf0
 8001318:	039b      	lsls	r3, r3, #14
 800131a:	401a      	ands	r2, r3
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <HAL_ADC_Init+0x344>)
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	001a      	movs	r2, r3
 800132c:	2100      	movs	r1, #0
 800132e:	f7ff fd9c 	bl	8000e6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133a:	493a      	ldr	r1, [pc, #232]	; (8001424 <HAL_ADC_Init+0x34c>)
 800133c:	001a      	movs	r2, r3
 800133e:	f7ff fd94 	bl	8000e6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2110      	movs	r1, #16
 8001356:	4249      	negs	r1, r1
 8001358:	430a      	orrs	r2, r1
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
 800135c:	e018      	b.n	8001390 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	039b      	lsls	r3, r3, #14
 8001366:	429a      	cmp	r2, r3
 8001368:	d112      	bne.n	8001390 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	3b01      	subs	r3, #1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	221c      	movs	r2, #28
 800137a:	4013      	ands	r3, r2
 800137c:	2210      	movs	r2, #16
 800137e:	4252      	negs	r2, r2
 8001380:	409a      	lsls	r2, r3
 8001382:	0011      	movs	r1, r2
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fd84 	bl	8000ea4 <LL_ADC_GetSamplingTimeCommonChannels>
 800139c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10b      	bne.n	80013be <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	2203      	movs	r2, #3
 80013b2:	4393      	bics	r3, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013bc:	e01c      	b.n	80013f8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	2212      	movs	r2, #18
 80013c4:	4393      	bics	r3, r2
 80013c6:	2210      	movs	r2, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2201      	movs	r2, #1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e2:	e009      	b.n	80013f8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	2210      	movs	r2, #16
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013f0:	231f      	movs	r3, #31
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013f8:	231f      	movs	r3, #31
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b008      	add	sp, #32
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	20000004 	.word	0x20000004
 800140c:	00030d40 	.word	0x00030d40
 8001410:	fffffefd 	.word	0xfffffefd
 8001414:	fffe0201 	.word	0xfffe0201
 8001418:	1ffffc02 	.word	0x1ffffc02
 800141c:	40012708 	.word	0x40012708
 8001420:	ffc3ffff 	.word	0xffc3ffff
 8001424:	07ffff04 	.word	0x07ffff04

08001428 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff fe3b 	bl	80010b4 <LL_ADC_REG_IsConversionOngoing>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d16c      	bne.n	800151c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2254      	movs	r2, #84	; 0x54
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_Start_DMA+0x28>
 800144c:	2302      	movs	r3, #2
 800144e:	e06c      	b.n	800152a <HAL_ADC_Start_DMA+0x102>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2254      	movs	r2, #84	; 0x54
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	4013      	ands	r3, r2
 8001462:	d113      	bne.n	800148c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fdef 	bl	800104c <LL_ADC_IsEnabled>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d004      	beq.n	800147c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff fdd6 	bl	8001028 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800148c:	2517      	movs	r5, #23
 800148e:	197c      	adds	r4, r7, r5
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fa3e 	bl	8001914 <ADC_Enable>
 8001498:	0003      	movs	r3, r0
 800149a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800149c:	002c      	movs	r4, r5
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d13e      	bne.n	8001524 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_ADC_Start_DMA+0x10c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	0052      	lsls	r2, r2, #1
 80014b2:	431a      	orrs	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c2:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_ADC_Start_DMA+0x110>)
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_ADC_Start_DMA+0x114>)
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d2:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_ADC_Start_DMA+0x118>)
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	221c      	movs	r2, #28
 80014dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2254      	movs	r2, #84	; 0x54
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2110      	movs	r1, #16
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3340      	adds	r3, #64	; 0x40
 8001500:	0019      	movs	r1, r3
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	193c      	adds	r4, r7, r4
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f000 fe34 	bl	8002174 <HAL_DMA_Start_IT>
 800150c:	0003      	movs	r3, r0
 800150e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fdbb 	bl	8001090 <LL_ADC_REG_StartConversion>
 800151a:	e003      	b.n	8001524 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800151c:	2317      	movs	r3, #23
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001524:	2317      	movs	r3, #23
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b006      	add	sp, #24
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	fffff0fe 	.word	0xfffff0fe
 8001538:	08001add 	.word	0x08001add
 800153c:	08001ba5 	.word	0x08001ba5
 8001540:	08001bc3 	.word	0x08001bc3

08001544 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156e:	2317      	movs	r3, #23
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2254      	movs	r2, #84	; 0x54
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x24>
 8001584:	2302      	movs	r3, #2
 8001586:	e1c0      	b.n	800190a <HAL_ADC_ConfigChannel+0x3a6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2254      	movs	r2, #84	; 0x54
 800158c:	2101      	movs	r1, #1
 800158e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fd8d 	bl	80010b4 <LL_ADC_REG_IsConversionOngoing>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0x3c>
 800159e:	e1a3      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d100      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 80015a8:	e143      	b.n	8001832 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d004      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ba:	4ac1      	ldr	r2, [pc, #772]	; (80018c0 <HAL_ADC_ConfigChannel+0x35c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d108      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0019      	movs	r1, r3
 80015ca:	0010      	movs	r0, r2
 80015cc:	f7ff fcb2 	bl	8000f34 <LL_ADC_REG_SetSequencerChAdd>
 80015d0:	e0c9      	b.n	8001766 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	211f      	movs	r1, #31
 80015dc:	400b      	ands	r3, r1
 80015de:	210f      	movs	r1, #15
 80015e0:	4099      	lsls	r1, r3
 80015e2:	000b      	movs	r3, r1
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	035b      	lsls	r3, r3, #13
 80015f0:	0b5b      	lsrs	r3, r3, #13
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x9c>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0e9b      	lsrs	r3, r3, #26
 80015fa:	221f      	movs	r2, #31
 80015fc:	4013      	ands	r3, r2
 80015fe:	e098      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d000      	beq.n	800160c <HAL_ADC_ConfigChannel+0xa8>
 800160a:	e091      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d000      	beq.n	8001618 <HAL_ADC_ConfigChannel+0xb4>
 8001616:	e089      	b.n	800172c <HAL_ADC_ConfigChannel+0x1c8>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2204      	movs	r2, #4
 800161e:	4013      	ands	r3, r2
 8001620:	d000      	beq.n	8001624 <HAL_ADC_ConfigChannel+0xc0>
 8001622:	e081      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1c4>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2208      	movs	r2, #8
 800162a:	4013      	ands	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_ADC_ConfigChannel+0xcc>
 800162e:	e079      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1c0>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2210      	movs	r2, #16
 8001636:	4013      	ands	r3, r2
 8001638:	d000      	beq.n	800163c <HAL_ADC_ConfigChannel+0xd8>
 800163a:	e071      	b.n	8001720 <HAL_ADC_ConfigChannel+0x1bc>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2220      	movs	r2, #32
 8001642:	4013      	ands	r3, r2
 8001644:	d000      	beq.n	8001648 <HAL_ADC_ConfigChannel+0xe4>
 8001646:	e069      	b.n	800171c <HAL_ADC_ConfigChannel+0x1b8>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	4013      	ands	r3, r2
 8001650:	d000      	beq.n	8001654 <HAL_ADC_ConfigChannel+0xf0>
 8001652:	e061      	b.n	8001718 <HAL_ADC_ConfigChannel+0x1b4>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	4013      	ands	r3, r2
 800165c:	d000      	beq.n	8001660 <HAL_ADC_ConfigChannel+0xfc>
 800165e:	e059      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1b0>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d151      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1ac>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4013      	ands	r3, r2
 8001676:	d149      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1a8>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4013      	ands	r3, r2
 8001682:	d141      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1a4>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d139      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1a0>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	4013      	ands	r3, r2
 800169a:	d131      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x19c>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	019b      	lsls	r3, r3, #6
 80016a4:	4013      	ands	r3, r2
 80016a6:	d129      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x198>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	4013      	ands	r3, r2
 80016b2:	d121      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x194>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4013      	ands	r3, r2
 80016be:	d119      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x190>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	4013      	ands	r3, r2
 80016ca:	d111      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x18c>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	029b      	lsls	r3, r3, #10
 80016d4:	4013      	ands	r3, r2
 80016d6:	d109      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x188>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	02db      	lsls	r3, r3, #11
 80016e0:	4013      	ands	r3, r2
 80016e2:	d001      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x184>
 80016e4:	2312      	movs	r3, #18
 80016e6:	e024      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e022      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016ec:	2311      	movs	r3, #17
 80016ee:	e020      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016f0:	2310      	movs	r3, #16
 80016f2:	e01e      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016f4:	230f      	movs	r3, #15
 80016f6:	e01c      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016f8:	230e      	movs	r3, #14
 80016fa:	e01a      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 80016fc:	230d      	movs	r3, #13
 80016fe:	e018      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001700:	230c      	movs	r3, #12
 8001702:	e016      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001704:	230b      	movs	r3, #11
 8001706:	e014      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001708:	230a      	movs	r3, #10
 800170a:	e012      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 800170c:	2309      	movs	r3, #9
 800170e:	e010      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001710:	2308      	movs	r3, #8
 8001712:	e00e      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001714:	2307      	movs	r3, #7
 8001716:	e00c      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001718:	2306      	movs	r3, #6
 800171a:	e00a      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 800171c:	2305      	movs	r3, #5
 800171e:	e008      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001720:	2304      	movs	r3, #4
 8001722:	e006      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001724:	2303      	movs	r3, #3
 8001726:	e004      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ce>
 8001730:	2300      	movs	r3, #0
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6852      	ldr	r2, [r2, #4]
 8001736:	201f      	movs	r0, #31
 8001738:	4002      	ands	r2, r0
 800173a:	4093      	lsls	r3, r2
 800173c:	000a      	movs	r2, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	d808      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	001a      	movs	r2, r3
 8001762:	f7ff fbc7 	bl	8000ef4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	001a      	movs	r2, r3
 8001774:	f7ff fc02 	bl	8000f7c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db00      	blt.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
 8001780:	e0bc      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fb63 	bl	8000e50 <LL_ADC_GetCommonPathInternalCh>
 800178a:	0003      	movs	r3, r0
 800178c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_ADC_ConfigChannel+0x364>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d122      	bne.n	80017de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a0:	d11d      	bne.n	80017de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	0412      	lsls	r2, r2, #16
 80017a8:	4313      	orrs	r3, r2
 80017aa:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 80017ac:	0019      	movs	r1, r3
 80017ae:	0010      	movs	r0, r2
 80017b0:	f7ff fb3a 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <HAL_ADC_ConfigChannel+0x368>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4945      	ldr	r1, [pc, #276]	; (80018d0 <HAL_ADC_ConfigChannel+0x36c>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7fe fca0 	bl	8000100 <__udivsi3>
 80017c0:	0003      	movs	r3, r0
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	0013      	movs	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	189b      	adds	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ce:	e002      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017dc:	e08e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <HAL_ADC_ConfigChannel+0x370>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10e      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	045b      	lsls	r3, r3, #17
 80017ee:	4013      	ands	r3, r2
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	0452      	lsls	r2, r2, #17
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 80017fc:	0019      	movs	r1, r3
 80017fe:	0010      	movs	r0, r2
 8001800:	f7ff fb12 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
 8001804:	e07a      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <HAL_ADC_ConfigChannel+0x374>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d000      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x2ae>
 8001810:	e074      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	03db      	lsls	r3, r3, #15
 8001818:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800181a:	d000      	beq.n	800181e <HAL_ADC_ConfigChannel+0x2ba>
 800181c:	e06e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	03d2      	lsls	r2, r2, #15
 8001824:	4313      	orrs	r3, r2
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 8001828:	0019      	movs	r1, r3
 800182a:	0010      	movs	r0, r2
 800182c:	f7ff fafc 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
 8001830:	e064      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	429a      	cmp	r2, r3
 800183c:	d004      	beq.n	8001848 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_ADC_ConfigChannel+0x35c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d107      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0019      	movs	r1, r3
 8001852:	0010      	movs	r0, r2
 8001854:	f7ff fb7f 	bl	8000f56 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da4d      	bge.n	80018fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff faf4 	bl	8000e50 <LL_ADC_GetCommonPathInternalCh>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_ADC_ConfigChannel+0x364>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d108      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_ADC_ConfigChannel+0x378>)
 800187a:	4013      	ands	r3, r2
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 800187e:	0019      	movs	r1, r3
 8001880:	0010      	movs	r0, r2
 8001882:	f7ff fad1 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
 8001886:	e039      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_ADC_ConfigChannel+0x370>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d108      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_ADC_ConfigChannel+0x37c>)
 8001896:	4013      	ands	r3, r2
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f7ff fac3 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
 80018a2:	e02b      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_ADC_ConfigChannel+0x374>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d126      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_ADC_ConfigChannel+0x380>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_ADC_ConfigChannel+0x360>)
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f7ff fab5 	bl	8000e28 <LL_ADC_SetCommonPathInternalCh>
 80018be:	e01d      	b.n	80018fc <HAL_ADC_ConfigChannel+0x398>
 80018c0:	80000004 	.word	0x80000004
 80018c4:	40012708 	.word	0x40012708
 80018c8:	b0001000 	.word	0xb0001000
 80018cc:	20000004 	.word	0x20000004
 80018d0:	00030d40 	.word	0x00030d40
 80018d4:	b8004000 	.word	0xb8004000
 80018d8:	b4002000 	.word	0xb4002000
 80018dc:	ff7fffff 	.word	0xff7fffff
 80018e0:	feffffff 	.word	0xfeffffff
 80018e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	2220      	movs	r2, #32
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018f4:	2317      	movs	r3, #23
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2254      	movs	r2, #84	; 0x54
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001904:	2317      	movs	r3, #23
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b006      	add	sp, #24
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)

08001914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fb91 	bl	800104c <LL_ADC_IsEnabled>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d000      	beq.n	8001930 <ADC_Enable+0x1c>
 800192e:	e069      	b.n	8001a04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <ADC_Enable+0xfc>)
 8001938:	4013      	ands	r3, r2
 800193a:	d00d      	beq.n	8001958 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	2210      	movs	r2, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2201      	movs	r2, #1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e056      	b.n	8001a06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fb51 	bl	8001004 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <ADC_Enable+0x100>)
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fa73 	bl	8000e50 <LL_ADC_GetCommonPathInternalCh>
 800196a:	0002      	movs	r2, r0
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	4013      	ands	r3, r2
 8001972:	d00f      	beq.n	8001994 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <ADC_Enable+0x104>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4928      	ldr	r1, [pc, #160]	; (8001a1c <ADC_Enable+0x108>)
 800197a:	0018      	movs	r0, r3
 800197c:	f7fe fbc0 	bl	8000100 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001984:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001986:	e002      	b.n	800198e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3b01      	subs	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f9      	bne.n	8001988 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e5b      	ldrb	r3, [r3, #25]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d033      	beq.n	8001a04 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800199c:	f7ff fa3a 	bl	8000e14 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019a4:	e027      	b.n	80019f6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fb4e 	bl	800104c <LL_ADC_IsEnabled>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d104      	bne.n	80019be <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fb23 	bl	8001004 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019be:	f7ff fa29 	bl	8000e14 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d914      	bls.n	80019f6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d00d      	beq.n	80019f6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	2210      	movs	r2, #16
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2201      	movs	r2, #1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e007      	b.n	8001a06 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d1d0      	bne.n	80019a6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	80000017 	.word	0x80000017
 8001a14:	40012708 	.word	0x40012708
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	00030d40 	.word	0x00030d40

08001a20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fb1e 	bl	800106e <LL_ADC_IsDisableOngoing>
 8001a32:	0003      	movs	r3, r0
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff fb06 	bl	800104c <LL_ADC_IsEnabled>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d046      	beq.n	8001ad2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d143      	bne.n	8001ad2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2205      	movs	r2, #5
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10d      	bne.n	8001a74 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fae3 	bl	8001028 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2203      	movs	r2, #3
 8001a68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff f9d3 	bl	8000e14 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a72:	e028      	b.n	8001ac6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	2210      	movs	r2, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2201      	movs	r2, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e021      	b.n	8001ad4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a90:	f7ff f9c0 	bl	8000e14 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d913      	bls.n	8001ac6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	2210      	movs	r2, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2201      	movs	r2, #1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e006      	b.n	8001ad4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1de      	bne.n	8001a90 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd80      	pop	{r7, pc}

08001adc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	2250      	movs	r2, #80	; 0x50
 8001af0:	4013      	ands	r3, r2
 8001af2:	d141      	bne.n	8001b78 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff f9e3 	bl	8000ed2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d02e      	beq.n	8001b6e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	7e9b      	ldrb	r3, [r3, #26]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d12a      	bne.n	8001b6e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d123      	bne.n	8001b6e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7ff fac2 	bl	80010b4 <LL_ADC_REG_IsConversionOngoing>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d110      	bne.n	8001b56 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	210c      	movs	r1, #12
 8001b40:	438a      	bics	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <ADC_DMAConvCplt+0xc4>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
 8001b54:	e00b      	b.n	8001b6e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2201      	movs	r2, #1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe fb69 	bl	8000248 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b76:	e00f      	b.n	8001b98 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d004      	beq.n	8001b8c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fce5 	bl	8001554 <HAL_ADC_ErrorCallback>
}
 8001b8a:	e005      	b.n	8001b98 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	0010      	movs	r0, r2
 8001b96:	4798      	blx	r3
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	fffffefe 	.word	0xfffffefe

08001ba4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fcc5 	bl	8001544 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2204      	movs	r2, #4
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff fcb2 	bl	8001554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <LL_ADC_SetCalibrationFactor>:
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	22b4      	movs	r2, #180	; 0xb4
 8001c06:	589b      	ldr	r3, [r3, r2]
 8001c08:	227f      	movs	r2, #127	; 0x7f
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	21b4      	movs	r1, #180	; 0xb4
 8001c16:	505a      	str	r2, [r3, r1]
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <LL_ADC_GetCalibrationFactor>:
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	22b4      	movs	r2, #180	; 0xb4
 8001c2c:	589b      	ldr	r3, [r3, r2]
 8001c2e:	227f      	movs	r2, #127	; 0x7f
 8001c30:	4013      	ands	r3, r2
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <LL_ADC_Enable>:
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <LL_ADC_Enable+0x20>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	7fffffe8 	.word	0x7fffffe8

08001c60 <LL_ADC_Disable>:
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <LL_ADC_Disable+0x20>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2202      	movs	r2, #2
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	7fffffe8 	.word	0x7fffffe8

08001c84 <LL_ADC_IsEnabled>:
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <LL_ADC_IsEnabled+0x18>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <LL_ADC_IsEnabled+0x1a>
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <LL_ADC_StartCalibration>:
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <LL_ADC_StartCalibration+0x24>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	0612      	lsls	r2, r2, #24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	7fffffe8 	.word	0x7fffffe8

08001cd0 <LL_ADC_IsCalibrationOnGoing>:
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	0fdb      	lsrs	r3, r3, #31
 8001cde:	07da      	lsls	r2, r3, #31
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2254      	movs	r2, #84	; 0x54
 8001d0c:	5c9b      	ldrb	r3, [r3, r2]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0ba      	b.n	8001e8c <HAL_ADCEx_Calibration_Start+0x194>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2254      	movs	r2, #84	; 0x54
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d1e:	2317      	movs	r3, #23
 8001d20:	18fc      	adds	r4, r7, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff fe7b 	bl	8001a20 <ADC_Disable>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff ffa6 	bl	8001c84 <LL_ADC_IsEnabled>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d000      	beq.n	8001d3e <HAL_ADCEx_Calibration_Start+0x46>
 8001d3c:	e099      	b.n	8001e72 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	2202      	movs	r2, #2
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a50      	ldr	r2, [pc, #320]	; (8001e98 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e02d      	b.n	8001dcc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff ff97 	bl	8001ca8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d7a:	e014      	b.n	8001da6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d90d      	bls.n	8001da6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	2212      	movs	r2, #18
 8001d90:	4393      	bics	r3, r2
 8001d92:	2210      	movs	r2, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2254      	movs	r2, #84	; 0x54
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e072      	b.n	8001e8c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ff90 	bl	8001cd0 <LL_ADC_IsCalibrationOnGoing>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d1e3      	bne.n	8001d7c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <LL_ADC_GetCalibrationFactor>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d9ce      	bls.n	8001d70 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001dd2:	69f9      	ldr	r1, [r7, #28]
 8001dd4:	69b8      	ldr	r0, [r7, #24]
 8001dd6:	f7fe f993 	bl	8000100 <__udivsi3>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff ff2a 	bl	8001c3c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ff01 	bl	8001bf8 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f7ff ff30 	bl	8001c60 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f808 	bl	8000e14 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e08:	e01b      	b.n	8001e42 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e0a:	f7ff f803 	bl	8000e14 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d914      	bls.n	8001e42 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <LL_ADC_IsEnabled>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d00d      	beq.n	8001e42 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2201      	movs	r2, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e024      	b.n	8001e8c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff ff1c 	bl	8001c84 <LL_ADC_IsEnabled>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d1dc      	bne.n	8001e0a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68d9      	ldr	r1, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	2203      	movs	r2, #3
 8001e66:	4393      	bics	r3, r2
 8001e68:	2201      	movs	r2, #1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e70:	e005      	b.n	8001e7e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	2210      	movs	r2, #16
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2254      	movs	r2, #84	; 0x54
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e86:	2317      	movs	r3, #23
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b009      	add	sp, #36	; 0x24
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	fffffefd 	.word	0xfffffefd
 8001e98:	00008003 	.word	0x00008003
 8001e9c:	ffff7ffc 	.word	0xffff7ffc
 8001ea0:	0002f1ff 	.word	0x0002f1ff

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	0002      	movs	r2, r0
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb6:	d809      	bhi.n	8001ecc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	231f      	movs	r3, #31
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_EnableIRQ+0x30>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4091      	lsls	r1, r2
 8001ec8:	000a      	movs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b7f      	cmp	r3, #127	; 0x7f
 8001eec:	d828      	bhi.n	8001f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	33c0      	adds	r3, #192	; 0xc0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	589b      	ldr	r3, [r3, r2]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	; 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	481f      	ldr	r0, [pc, #124]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	430a      	orrs	r2, r1
 8001f38:	33c0      	adds	r3, #192	; 0xc0
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f3e:	e031      	b.n	8001fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	0019      	movs	r1, r3
 8001f48:	230f      	movs	r3, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3306      	adds	r3, #6
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1dfa      	adds	r2, r7, #7
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2203      	movs	r2, #3
 8001f62:	400a      	ands	r2, r1
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	21ff      	movs	r1, #255	; 0xff
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	401a      	ands	r2, r3
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2303      	movs	r3, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	001c      	movs	r4, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	4023      	ands	r3, r4
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18c3      	adds	r3, r0, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b003      	add	sp, #12
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	045b      	lsls	r3, r3, #17
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d301      	bcc.n	8001fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e010      	b.n	8001fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <SysTick_Config+0x44>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2103      	movs	r1, #3
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ff7c 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	210f      	movs	r1, #15
 8002008:	187b      	adds	r3, r7, r1
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	0011      	movs	r1, r2
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	0002      	movs	r2, r0
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b25b      	sxtb	r3, r3
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ff33 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ffaf 	bl	8001fb4 <SysTick_Config>
 8002056:	0003      	movs	r3, r0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e077      	b.n	8002162 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3d      	ldr	r2, [pc, #244]	; (800216c <HAL_DMA_Init+0x10c>)
 8002078:	4694      	mov	ip, r2
 800207a:	4463      	add	r3, ip
 800207c:	2114      	movs	r1, #20
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f83e 	bl	8000100 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2225      	movs	r2, #37	; 0x25
 8002090:	2102      	movs	r1, #2
 8002092:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4934      	ldr	r1, [pc, #208]	; (8002170 <HAL_DMA_Init+0x110>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f9c1 	bl	8002464 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	01db      	lsls	r3, r3, #7
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d102      	bne.n	80020f4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	213f      	movs	r1, #63	; 0x3f
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800210a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d011      	beq.n	8002138 <HAL_DMA_Init+0xd8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d80d      	bhi.n	8002138 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f9cc 	bl	80024bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e008      	b.n	800214a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2225      	movs	r2, #37	; 0x25
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	bffdfff8 	.word	0xbffdfff8
 8002170:	ffff800f 	.word	0xffff800f

08002174 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2317      	movs	r3, #23
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2224      	movs	r2, #36	; 0x24
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x24>
 8002194:	2302      	movs	r3, #2
 8002196:	e06f      	b.n	8002278 <HAL_DMA_Start_IT+0x104>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2225      	movs	r2, #37	; 0x25
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d157      	bne.n	800225c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2225      	movs	r2, #37	; 0x25
 80021b0:	2102      	movs	r1, #2
 80021b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	438a      	bics	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f907 	bl	80023e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	210e      	movs	r1, #14
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2104      	movs	r1, #4
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	210a      	movs	r1, #10
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	025b      	lsls	r3, r3, #9
 800221a:	4013      	ands	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	0049      	lsls	r1, r1, #1
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0049      	lsls	r1, r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e00a      	b.n	8002272 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2224      	movs	r2, #36	; 0x24
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800226a:	2317      	movs	r3, #23
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b006      	add	sp, #24
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	221c      	movs	r2, #28
 800229c:	4013      	ands	r3, r2
 800229e:	2204      	movs	r2, #4
 80022a0:	409a      	lsls	r2, r3
 80022a2:	0013      	movs	r3, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_IRQHandler+0x7a>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d023      	beq.n	80022fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	4013      	ands	r3, r2
 80022bc:	d107      	bne.n	80022ce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2104      	movs	r1, #4
 80022ca:	438a      	bics	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	221c      	movs	r2, #28
 80022d8:	4013      	ands	r3, r2
 80022da:	2204      	movs	r2, #4
 80022dc:	409a      	lsls	r2, r3
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_DMA_IRQHandler+0x6e>
 80022ec:	e073      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	0010      	movs	r0, r2
 80022f6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80022f8:	e06d      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	221c      	movs	r2, #28
 8002300:	4013      	ands	r3, r2
 8002302:	2202      	movs	r2, #2
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	d02e      	beq.n	800236c <HAL_DMA_IRQHandler+0xec>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d02a      	beq.n	800236c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2220      	movs	r2, #32
 800231e:	4013      	ands	r3, r2
 8002320:	d10b      	bne.n	800233a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	210a      	movs	r1, #10
 800232e:	438a      	bics	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2225      	movs	r2, #37	; 0x25
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	221c      	movs	r2, #28
 8002344:	4013      	ands	r3, r2
 8002346:	2202      	movs	r2, #2
 8002348:	409a      	lsls	r2, r3
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03a      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	0010      	movs	r0, r2
 8002368:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800236a:	e034      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	221c      	movs	r2, #28
 8002372:	4013      	ands	r3, r2
 8002374:	2208      	movs	r2, #8
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	d02b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	210e      	movs	r1, #14
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	221c      	movs	r2, #28
 80023a2:	4013      	ands	r3, r2
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2225      	movs	r2, #37	; 0x25
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	0010      	movs	r0, r2
 80023d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46c0      	nop			; (mov r8, r8)
}
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40020000 	.word	0x40020000

080023e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800240c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <DMA_SetConfig+0x7c>)
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	221c      	movs	r2, #28
 8002418:	4013      	ands	r3, r2
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <DMA_SetConfig+0x7c>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d108      	bne.n	8002446 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002444:	e007      	b.n	8002456 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	60da      	str	r2, [r3, #12]
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40020000 	.word	0x40020000

08002464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002474:	4694      	mov	ip, r2
 8002476:	4463      	add	r3, ip
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	001a      	movs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	23ff      	movs	r3, #255	; 0xff
 8002488:	4013      	ands	r3, r2
 800248a:	3b08      	subs	r3, #8
 800248c:	2114      	movs	r1, #20
 800248e:	0018      	movs	r0, r3
 8002490:	f7fd fe36 	bl	8000100 <__udivsi3>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800249c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	221f      	movs	r2, #31
 80024a2:	4013      	ands	r3, r2
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	10008200 	.word	0x10008200
 80024b8:	40020880 	.word	0x40020880

080024bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	223f      	movs	r2, #63	; 0x3f
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024d2:	4694      	mov	ip, r2
 80024d4:	4463      	add	r3, ip
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	001a      	movs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	1000823f 	.word	0x1000823f
 8002500:	40020940 	.word	0x40020940

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	e147      	b.n	80027a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4091      	lsls	r1, r2
 800251e:	000a      	movs	r2, r1
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <HAL_GPIO_Init+0x28>
 800252a:	e138      	b.n	800279e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	4013      	ands	r3, r2
 8002534:	2b01      	cmp	r3, #1
 8002536:	d005      	beq.n	8002544 <HAL_GPIO_Init+0x40>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	4013      	ands	r3, r2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	43da      	mvns	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	2201      	movs	r2, #1
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d017      	beq.n	80025e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d123      	bne.n	8002636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	58d3      	ldr	r3, [r2, r3]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2207      	movs	r2, #7
 8002600:	4013      	ands	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	43da      	mvns	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2107      	movs	r1, #7
 800261a:	400b      	ands	r3, r1
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	43da      	mvns	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	401a      	ands	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	23c0      	movs	r3, #192	; 0xc0
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_GPIO_Init+0x174>
 8002676:	e092      	b.n	800279e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3318      	adds	r3, #24
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	589b      	ldr	r3, [r3, r2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2203      	movs	r2, #3
 800268a:	4013      	ands	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	220f      	movs	r2, #15
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	43da      	mvns	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	23a0      	movs	r3, #160	; 0xa0
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x1ca>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_GPIO_Init+0x2bc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x1c6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a44      	ldr	r2, [pc, #272]	; (80027c4 <HAL_GPIO_Init+0x2c0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x1c2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_GPIO_Init+0x2c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x1be>
 80026be:	2303      	movs	r3, #3
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026ce:	2300      	movs	r3, #0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	2103      	movs	r1, #3
 80026d4:	400a      	ands	r2, r1
 80026d6:	00d2      	lsls	r2, r2, #3
 80026d8:	4093      	lsls	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026e0:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3318      	adds	r3, #24
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	035b      	lsls	r3, r3, #13
 8002706:	4013      	ands	r3, r2
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	039b      	lsls	r3, r3, #14
 8002730:	4013      	ands	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 8002744:	2384      	movs	r3, #132	; 0x84
 8002746:	58d3      	ldr	r3, [r2, r3]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43da      	mvns	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002768:	4914      	ldr	r1, [pc, #80]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 800276a:	2284      	movs	r2, #132	; 0x84
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	58d3      	ldr	r3, [r2, r3]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	4013      	ands	r3, r2
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002796:	4909      	ldr	r1, [pc, #36]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	40da      	lsrs	r2, r3
 80027ac:	1e13      	subs	r3, r2, #0
 80027ae:	d000      	beq.n	80027b2 <HAL_GPIO_Init+0x2ae>
 80027b0:	e6b0      	b.n	8002514 <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b006      	add	sp, #24
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021800 	.word	0x40021800
 80027c0:	50000400 	.word	0x50000400
 80027c4:	50000800 	.word	0x50000800
 80027c8:	50000c00 	.word	0x50000c00

080027cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	000a      	movs	r2, r1
 80027d6:	1cbb      	adds	r3, r7, #2
 80027d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	1cba      	adds	r2, r7, #2
 80027e0:	8812      	ldrh	r2, [r2, #0]
 80027e2:	4013      	ands	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027e6:	230f      	movs	r3, #15
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	0008      	movs	r0, r1
 8002810:	0011      	movs	r1, r2
 8002812:	1cbb      	adds	r3, r7, #2
 8002814:	1c02      	adds	r2, r0, #0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	1c7b      	adds	r3, r7, #1
 800281a:	1c0a      	adds	r2, r1, #0
 800281c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002826:	1cbb      	adds	r3, r7, #2
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800282e:	e003      	b.n	8002838 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d11f      	bne.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	0013      	movs	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	189b      	adds	r3, r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4912      	ldr	r1, [pc, #72]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7fd fc44 	bl	8000100 <__udivsi3>
 8002878:	0003      	movs	r3, r0
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800287e:	e008      	b.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3b01      	subs	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e001      	b.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e009      	b.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	401a      	ands	r2, r3
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d0ed      	beq.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	40007000 	.word	0x40007000
 80028b4:	fffff9ff 	.word	0xfffff9ff
 80028b8:	20000004 	.word	0x20000004
 80028bc:	000f4240 	.word	0x000f4240

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e2f3      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x1e>
 80028dc:	e07c      	b.n	80029d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4bc3      	ldr	r3, [pc, #780]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2238      	movs	r2, #56	; 0x38
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e8:	4bc0      	ldr	r3, [pc, #768]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2203      	movs	r2, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d102      	bne.n	80028fe <HAL_RCC_OscConfig+0x3e>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4bb9      	ldr	r3, [pc, #740]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	029b      	lsls	r3, r3, #10
 800290c:	4013      	ands	r3, r2
 800290e:	d062      	beq.n	80029d6 <HAL_RCC_OscConfig+0x116>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d15e      	bne.n	80029d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e2ce      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	025b      	lsls	r3, r3, #9
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x78>
 8002928:	4bb0      	ldr	r3, [pc, #704]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4baf      	ldr	r3, [pc, #700]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0249      	lsls	r1, r1, #9
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e020      	b.n	800297a <HAL_RCC_OscConfig+0xba>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	23a0      	movs	r3, #160	; 0xa0
 800293e:	02db      	lsls	r3, r3, #11
 8002940:	429a      	cmp	r2, r3
 8002942:	d10e      	bne.n	8002962 <HAL_RCC_OscConfig+0xa2>
 8002944:	4ba9      	ldr	r3, [pc, #676]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4ba8      	ldr	r3, [pc, #672]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	02c9      	lsls	r1, r1, #11
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4ba6      	ldr	r3, [pc, #664]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4ba5      	ldr	r3, [pc, #660]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0249      	lsls	r1, r1, #9
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0xba>
 8002962:	4ba2      	ldr	r3, [pc, #648]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4ba1      	ldr	r3, [pc, #644]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002968:	49a1      	ldr	r1, [pc, #644]	; (8002bf0 <HAL_RCC_OscConfig+0x330>)
 800296a:	400a      	ands	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	4b9f      	ldr	r3, [pc, #636]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b9e      	ldr	r3, [pc, #632]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002974:	499f      	ldr	r1, [pc, #636]	; (8002bf4 <HAL_RCC_OscConfig+0x334>)
 8002976:	400a      	ands	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d014      	beq.n	80029ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fa47 	bl	8000e14 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fa42 	bl	8000e14 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e28d      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299e:	4b93      	ldr	r3, [pc, #588]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	029b      	lsls	r3, r3, #10
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xcc>
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fa32 	bl	8000e14 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b6:	f7fe fa2d 	bl	8000e14 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e278      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4013      	ands	r3, r2
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0xf6>
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2202      	movs	r2, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d100      	bne.n	80029e4 <HAL_RCC_OscConfig+0x124>
 80029e2:	e099      	b.n	8002b18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2238      	movs	r2, #56	; 0x38
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2203      	movs	r2, #3
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x144>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d002      	beq.n	8002a0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d135      	bne.n	8002a76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0a:	4b78      	ldr	r3, [pc, #480]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4013      	ands	r3, r2
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x162>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e24b      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a74      	ldr	r2, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x338>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	021a      	lsls	r2, r3, #8
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d112      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a3e:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6e      	ldr	r2, [pc, #440]	; (8002bfc <HAL_RCC_OscConfig+0x33c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a52:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0adb      	lsrs	r3, r3, #11
 8002a58:	2207      	movs	r2, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	4a68      	ldr	r2, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x340>)
 8002a5e:	40da      	lsrs	r2, r3
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x344>)
 8002a62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_OscConfig+0x348>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fe f977 	bl	8000d5c <HAL_InitTick>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d051      	beq.n	8002b16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e221      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d030      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5e      	ldr	r2, [pc, #376]	; (8002bfc <HAL_RCC_OscConfig+0x33c>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe f9b8 	bl	8000e14 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe f9b3 	bl	8000e14 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1fe      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b48      	ldr	r3, [pc, #288]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x338>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e01b      	b.n	8002b18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ae0:	4b42      	ldr	r3, [pc, #264]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002ae6:	4949      	ldr	r1, [pc, #292]	; (8002c0c <HAL_RCC_OscConfig+0x34c>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f992 	bl	8000e14 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe f98d 	bl	8000e14 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1d8      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x236>
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d047      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2238      	movs	r2, #56	; 0x38
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b18      	cmp	r3, #24
 8002b2c:	d10a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	2202      	movs	r2, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d138      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e1ba      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f95c 	bl	8000e14 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f957 	bl	8000e14 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1a2      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d0f1      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2a2>
 8002b7e:	e018      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f942 	bl	8000e14 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe f93d 	bl	8000e14 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e188      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f1      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d100      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2fe>
 8002bbc:	e0c6      	b.n	8002d4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	231f      	movs	r3, #31
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2238      	movs	r2, #56	; 0x38
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d11e      	bne.n	8002c10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d100      	bne.n	8002bde <HAL_RCC_OscConfig+0x31e>
 8002bdc:	e0b6      	b.n	8002d4c <HAL_RCC_OscConfig+0x48c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d000      	beq.n	8002be8 <HAL_RCC_OscConfig+0x328>
 8002be6:	e0b1      	b.n	8002d4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e166      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	fffeffff 	.word	0xfffeffff
 8002bf4:	fffbffff 	.word	0xfffbffff
 8002bf8:	ffff80ff 	.word	0xffff80ff
 8002bfc:	ffffc7ff 	.word	0xffffc7ff
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	20000004 	.word	0x20000004
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c10:	4bac      	ldr	r3, [pc, #688]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x360>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x362>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4ba7      	ldr	r3, [pc, #668]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2a:	4ba6      	ldr	r3, [pc, #664]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	0549      	lsls	r1, r1, #21
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c34:	4ba3      	ldr	r3, [pc, #652]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c42:	231f      	movs	r3, #31
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4a:	4b9f      	ldr	r3, [pc, #636]	; (8002ec8 <HAL_RCC_OscConfig+0x608>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d11a      	bne.n	8002c8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c56:	4b9c      	ldr	r3, [pc, #624]	; (8002ec8 <HAL_RCC_OscConfig+0x608>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b9b      	ldr	r3, [pc, #620]	; (8002ec8 <HAL_RCC_OscConfig+0x608>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0049      	lsls	r1, r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c64:	f7fe f8d6 	bl	8000e14 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe f8d1 	bl	8000e14 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e11c      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	4b91      	ldr	r3, [pc, #580]	; (8002ec8 <HAL_RCC_OscConfig+0x608>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3e2>
 8002c94:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c98:	4b8a      	ldr	r3, [pc, #552]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x41c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x404>
 8002caa:	4b86      	ldr	r3, [pc, #536]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cb6:	4b83      	ldr	r3, [pc, #524]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cba:	4b82      	ldr	r3, [pc, #520]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x41c>
 8002cc4:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc8:	4b7e      	ldr	r3, [pc, #504]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cd0:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	438a      	bics	r2, r1
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d014      	beq.n	8002d0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f896 	bl	8000e14 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe f891 	bl	8000e14 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a74      	ldr	r2, [pc, #464]	; (8002ecc <HAL_RCC_OscConfig+0x60c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	4b70      	ldr	r3, [pc, #448]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x42e>
 8002d0c:	e013      	b.n	8002d36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f881 	bl	8000e14 <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f87c 	bl	8000e14 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x60c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0c6      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d2c:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d36:	231f      	movs	r3, #31
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d46:	4962      	ldr	r1, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x610>)
 8002d48:	400a      	ands	r2, r1
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d100      	bne.n	8002d56 <HAL_RCC_OscConfig+0x496>
 8002d54:	e0b0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d56:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2238      	movs	r2, #56	; 0x38
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d100      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4a4>
 8002d62:	e078      	b.n	8002e56 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d153      	bne.n	8002e14 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d72:	4958      	ldr	r1, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x614>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f84c 	bl	8000e14 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe f847 	bl	8000e14 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e092      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d94:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	049b      	lsls	r3, r3, #18
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da0:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_RCC_OscConfig+0x618>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0449      	lsls	r1, r1, #17
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ddc:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	0549      	lsls	r1, r1, #21
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f813 	bl	8000e14 <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f80e 	bl	8000e14 <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e059      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	049b      	lsls	r3, r3, #18
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x534>
 8002e12:	e051      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	492e      	ldr	r1, [pc, #184]	; (8002ed4 <HAL_RCC_OscConfig+0x614>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fd fff8 	bl	8000e14 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fd fff3 	bl	8000e14 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03e      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	049b      	lsls	r3, r3, #18
 8002e44:	4013      	ands	r3, r2
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e4e:	4923      	ldr	r1, [pc, #140]	; (8002edc <HAL_RCC_OscConfig+0x61c>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	e030      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02b      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_RCC_OscConfig+0x604>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11e      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2270      	movs	r2, #112	; 0x70
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d117      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	23fe      	movs	r3, #254	; 0xfe
 8002e88:	01db      	lsls	r3, r3, #7
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10e      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	23f8      	movs	r3, #248	; 0xf8
 8002e9a:	039b      	lsls	r3, r3, #14
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	0f5b      	lsrs	r3, r3, #29
 8002eaa:	075a      	lsls	r2, r3, #29
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b008      	add	sp, #32
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	00001388 	.word	0x00001388
 8002ed0:	efffffff 	.word	0xefffffff
 8002ed4:	feffffff 	.word	0xfeffffff
 8002ed8:	1fc1808c 	.word	0x1fc1808c
 8002edc:	effefffc 	.word	0xeffefffc

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0e9      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2207      	movs	r2, #7
 8002efa:	4013      	ands	r3, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d91e      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2207      	movs	r2, #7
 8002f08:	4393      	bics	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	4b70      	ldr	r3, [pc, #448]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f14:	f7fd ff7e 	bl	8000e14 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1e:	f7fd ff79 	bl	8000e14 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	4a6a      	ldr	r2, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0ca      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2207      	movs	r2, #7
 8002f38:	4013      	ands	r3, r2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2202      	movs	r2, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4013      	ands	r3, r2
 8002f52:	d006      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f54:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5a:	21e0      	movs	r1, #224	; 0xe0
 8002f5c:	01c9      	lsls	r1, r1, #7
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f62:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_RCC_ClockConfig+0x1fc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d057      	beq.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	d12b      	bne.n	8002fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e097      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa0:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	049b      	lsls	r3, r3, #18
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d11f      	bne.n	8002fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e08b      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb8:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d113      	bne.n	8002fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e07f      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d108      	bne.n	8002fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e074      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e06d      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fd ff08 	bl	8000e14 <HAL_GetTick>
 8003004:	0003      	movs	r3, r0
 8003006:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003008:	e009      	b.n	800301e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300a:	f7fd ff03 	bl	8000e14 <HAL_GetTick>
 800300e:	0002      	movs	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e054      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2238      	movs	r2, #56	; 0x38
 8003024:	401a      	ands	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	429a      	cmp	r2, r3
 800302e:	d1ec      	bne.n	800300a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2207      	movs	r2, #7
 8003036:	4013      	ands	r3, r2
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d21e      	bcs.n	800307c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2207      	movs	r2, #7
 8003044:	4393      	bics	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003050:	f7fd fee0 	bl	8000e14 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003058:	e009      	b.n	800306e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305a:	f7fd fedb 	bl	8000e14 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e02c      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2207      	movs	r2, #7
 8003074:	4013      	ands	r3, r2
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2204      	movs	r2, #4
 8003082:	4013      	ands	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_RCC_ClockConfig+0x200>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800309a:	f000 f829 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 800309e:	0001      	movs	r1, r0
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCC_ClockConfig+0x1f8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	220f      	movs	r2, #15
 80030a8:	401a      	ands	r2, r3
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x204>)
 80030ac:	0092      	lsls	r2, r2, #2
 80030ae:	58d3      	ldr	r3, [r2, r3]
 80030b0:	221f      	movs	r2, #31
 80030b2:	4013      	ands	r3, r2
 80030b4:	000a      	movs	r2, r1
 80030b6:	40da      	lsrs	r2, r3
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x208>)
 80030ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x20c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7fd fe4b 	bl	8000d5c <HAL_InitTick>
 80030c6:	0003      	movs	r3, r0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022000 	.word	0x40022000
 80030d4:	00001388 	.word	0x00001388
 80030d8:	40021000 	.word	0x40021000
 80030dc:	fffff0ff 	.word	0xfffff0ff
 80030e0:	ffff8fff 	.word	0xffff8fff
 80030e4:	08004848 	.word	0x08004848
 80030e8:	20000004 	.word	0x20000004
 80030ec:	20000008 	.word	0x20000008

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2238      	movs	r2, #56	; 0x38
 80030fc:	4013      	ands	r3, r2
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0adb      	lsrs	r3, r3, #11
 8003106:	2207      	movs	r2, #7
 8003108:	4013      	ands	r3, r2
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	0013      	movs	r3, r2
 8003110:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	4835      	ldr	r0, [pc, #212]	; (80031ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8003116:	f7fc fff3 	bl	8000100 <__udivsi3>
 800311a:	0003      	movs	r3, r0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e05d      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2238      	movs	r2, #56	; 0x38
 8003126:	4013      	ands	r3, r2
 8003128:	2b08      	cmp	r3, #8
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e054      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2238      	movs	r2, #56	; 0x38
 8003138:	4013      	ands	r3, r2
 800313a:	2b10      	cmp	r3, #16
 800313c:	d138      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2203      	movs	r2, #3
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d10d      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	4824      	ldr	r0, [pc, #144]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003160:	f7fc ffce 	bl	8000100 <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	0019      	movs	r1, r3
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	227f      	movs	r2, #127	; 0x7f
 8003170:	4013      	ands	r3, r2
 8003172:	434b      	muls	r3, r1
 8003174:	617b      	str	r3, [r7, #20]
        break;
 8003176:	e00d      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	481c      	ldr	r0, [pc, #112]	; (80031ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800317c:	f7fc ffc0 	bl	8000100 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	0019      	movs	r1, r3
 8003184:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	227f      	movs	r2, #127	; 0x7f
 800318c:	4013      	ands	r3, r2
 800318e:	434b      	muls	r3, r1
 8003190:	617b      	str	r3, [r7, #20]
        break;
 8003192:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0f5b      	lsrs	r3, r3, #29
 800319a:	2207      	movs	r2, #7
 800319c:	4013      	ands	r3, r2
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	6978      	ldr	r0, [r7, #20]
 80031a6:	f7fc ffab 	bl	8000100 <__udivsi3>
 80031aa:	0003      	movs	r3, r0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e015      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2238      	movs	r2, #56	; 0x38
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d103      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2238      	movs	r2, #56	; 0x38
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b18      	cmp	r3, #24
 80031ce:	d103      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031d0:	23fa      	movs	r3, #250	; 0xfa
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e001      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031dc:	693b      	ldr	r3, [r7, #16]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031fc:	2313      	movs	r3, #19
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2312      	movs	r3, #18
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003218:	e0a3      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2011      	movs	r0, #17
 800321c:	183b      	adds	r3, r7, r0
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	055b      	lsls	r3, r3, #21
 800322a:	4013      	ands	r3, r2
 800322c:	d110      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003232:	4b7b      	ldr	r3, [pc, #492]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0549      	lsls	r1, r1, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c
 800323c:	4b78      	ldr	r3, [pc, #480]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800323e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	183b      	adds	r3, r7, r0
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b73      	ldr	r3, [pc, #460]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0049      	lsls	r1, r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800325e:	f7fd fdd9 	bl	8000e14 <HAL_GetTick>
 8003262:	0003      	movs	r3, r0
 8003264:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003266:	e00b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fd fdd4 	bl	8000e14 <HAL_GetTick>
 800326c:	0002      	movs	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d904      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003276:	2313      	movs	r3, #19
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2203      	movs	r2, #3
 800327c:	701a      	strb	r2, [r3, #0]
        break;
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d0ed      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800328c:	2313      	movs	r3, #19
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d154      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003296:	4b62      	ldr	r3, [pc, #392]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800329a:	23c0      	movs	r3, #192	; 0xc0
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d019      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d014      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b2:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	4a5c      	ldr	r2, [pc, #368]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032bc:	4b58      	ldr	r3, [pc, #352]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c0:	4b57      	ldr	r3, [pc, #348]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	0249      	lsls	r1, r1, #9
 80032c6:	430a      	orrs	r2, r1
 80032c8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ca:	4b55      	ldr	r3, [pc, #340]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032d0:	4956      	ldr	r1, [pc, #344]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032d6:	4b52      	ldr	r3, [pc, #328]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
 80032e2:	d016      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd fd96 	bl	8000e14 <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ec:	e00c      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd fd91 	bl	8000e14 <HAL_GetTick>
 80032f2:	0002      	movs	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d904      	bls.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80032fe:	2313      	movs	r3, #19
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2203      	movs	r2, #3
 8003304:	701a      	strb	r2, [r3, #0]
            break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003308:	4b45      	ldr	r3, [pc, #276]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2202      	movs	r2, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d0ed      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003312:	2313      	movs	r3, #19
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800332c:	430a      	orrs	r2, r1
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003330:	e00c      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003332:	2312      	movs	r3, #18
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2213      	movs	r2, #19
 8003338:	18ba      	adds	r2, r7, r2
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e005      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	2312      	movs	r3, #18
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2213      	movs	r2, #19
 8003346:	18ba      	adds	r2, r7, r2
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800334c:	2311      	movs	r3, #17
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335e:	400a      	ands	r2, r1
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	2203      	movs	r2, #3
 8003372:	4393      	bics	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800337c:	430a      	orrs	r2, r1
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2220      	movs	r2, #32
 8003386:	4013      	ands	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800339a:	430a      	orrs	r2, r1
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	01db      	lsls	r3, r3, #7
 80033a6:	4013      	ands	r3, r2
 80033a8:	d015      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	0899      	lsrs	r1, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	0249      	lsls	r1, r1, #9
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4013      	ands	r3, r2
 80033e0:	d016      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	01db      	lsls	r3, r3, #7
 80033fe:	429a      	cmp	r2, r3
 8003400:	d106      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0249      	lsls	r1, r1, #9
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003410:	2312      	movs	r3, #18
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	781b      	ldrb	r3, [r3, #0]
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
 8003428:	fffffcff 	.word	0xfffffcff
 800342c:	fffeffff 	.word	0xfffeffff
 8003430:	00001388 	.word	0x00001388
 8003434:	efffffff 	.word	0xefffffff
 8003438:	ffffcfff 	.word	0xffffcfff
 800343c:	ffff3fff 	.word	0xffff3fff

08003440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0a8      	b.n	80035a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	2382      	movs	r3, #130	; 0x82
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	429a      	cmp	r2, r3
 8003464:	d009      	beq.n	800347a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	61da      	str	r2, [r3, #28]
 800346c:	e005      	b.n	800347a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	225d      	movs	r2, #93	; 0x5d
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	225c      	movs	r2, #92	; 0x5c
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f7fd fb10 	bl	8000abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	225d      	movs	r2, #93	; 0x5d
 80034a0:	2102      	movs	r1, #2
 80034a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	438a      	bics	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	23e0      	movs	r3, #224	; 0xe0
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d902      	bls.n	80034c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e002      	b.n	80034cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	015b      	lsls	r3, r3, #5
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	23f0      	movs	r3, #240	; 0xf0
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d008      	beq.n	80034ea <HAL_SPI_Init+0xaa>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	23e0      	movs	r3, #224	; 0xe0
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d002      	beq.n	80034ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	2382      	movs	r3, #130	; 0x82
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	401a      	ands	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	2384      	movs	r3, #132	; 0x84
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	400b      	ands	r3, r1
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2102      	movs	r1, #2
 8003506:	400b      	ands	r3, r1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2101      	movs	r1, #1
 8003510:	400b      	ands	r3, r1
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6999      	ldr	r1, [r3, #24]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	400b      	ands	r3, r1
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2138      	movs	r1, #56	; 0x38
 8003526:	400b      	ands	r3, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	400b      	ands	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	0011      	movs	r1, r2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	2204      	movs	r2, #4
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2110      	movs	r1, #16
 8003558:	400b      	ands	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	2108      	movs	r1, #8
 8003562:	400b      	ands	r3, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	23f0      	movs	r3, #240	; 0xf0
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	400b      	ands	r3, r1
 8003570:	431a      	orrs	r2, r3
 8003572:	0011      	movs	r1, r2
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	015b      	lsls	r3, r3, #5
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4907      	ldr	r1, [pc, #28]	; (80035ac <HAL_SPI_Init+0x16c>)
 8003590:	400a      	ands	r2, r1
 8003592:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	225d      	movs	r2, #93	; 0x5d
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffff7ff 	.word	0xfffff7ff

080035b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035c0:	231f      	movs	r3, #31
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	225c      	movs	r2, #92	; 0x5c
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_SPI_Transmit+0x26>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e140      	b.n	8003858 <HAL_SPI_Transmit+0x2a8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	225c      	movs	r2, #92	; 0x5c
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035de:	f7fd fc19 	bl	8000e14 <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035e6:	2316      	movs	r3, #22
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	1dba      	adds	r2, r7, #6
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	225d      	movs	r2, #93	; 0x5d
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d004      	beq.n	8003606 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80035fc:	231f      	movs	r3, #31
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2202      	movs	r2, #2
 8003602:	701a      	strb	r2, [r3, #0]
    goto error;
 8003604:	e11d      	b.n	8003842 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_SPI_Transmit+0x64>
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003614:	231f      	movs	r3, #31
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    goto error;
 800361c:	e111      	b.n	8003842 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	225d      	movs	r2, #93	; 0x5d
 8003622:	2103      	movs	r1, #3
 8003624:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1dba      	adds	r2, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1dba      	adds	r2, r7, #6
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2244      	movs	r2, #68	; 0x44
 800364c:	2100      	movs	r1, #0
 800364e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2246      	movs	r2, #70	; 0x46
 8003654:	2100      	movs	r1, #0
 8003656:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	429a      	cmp	r2, r3
 800366e:	d110      	bne.n	8003692 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	438a      	bics	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	01c9      	lsls	r1, r1, #7
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d007      	beq.n	80036b0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	23e0      	movs	r3, #224	; 0xe0
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d94e      	bls.n	800375a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_SPI_Transmit+0x11e>
 80036c4:	2316      	movs	r3, #22
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d13f      	bne.n	800374e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036f2:	e02c      	b.n	800374e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d112      	bne.n	8003728 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003726:	e012      	b.n	800374e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003728:	f7fd fb74 	bl	8000e14 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d802      	bhi.n	800373e <HAL_SPI_Transmit+0x18e>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Transmit+0x194>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003744:	231f      	movs	r3, #31
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2203      	movs	r2, #3
 800374a:	701a      	strb	r2, [r3, #0]
          goto error;
 800374c:	e079      	b.n	8003842 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1cd      	bne.n	80036f4 <HAL_SPI_Transmit+0x144>
 8003758:	e04f      	b.n	80037fa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_SPI_Transmit+0x1bc>
 8003762:	2316      	movs	r3, #22
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d141      	bne.n	80037f0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003792:	e02d      	b.n	80037f0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d113      	bne.n	80037ca <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c8:	e012      	b.n	80037f0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ca:	f7fd fb23 	bl	8000e14 <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d802      	bhi.n	80037e0 <HAL_SPI_Transmit+0x230>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_SPI_Transmit+0x236>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2203      	movs	r2, #3
 80037ec:	701a      	strb	r2, [r3, #0]
          goto error;
 80037ee:	e028      	b.n	8003842 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1cc      	bne.n	8003794 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 ff85 	bl	8004710 <SPI_EndRxTxTransaction>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d002      	beq.n	8003810 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003836:	231f      	movs	r3, #31
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e000      	b.n	8003842 <HAL_SPI_Transmit+0x292>
  }

error:
 8003840:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	225d      	movs	r2, #93	; 0x5d
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	225c      	movs	r2, #92	; 0x5c
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003852:	231f      	movs	r3, #31
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	781b      	ldrb	r3, [r3, #0]
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b008      	add	sp, #32
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003870:	2317      	movs	r3, #23
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	2382      	movs	r3, #130	; 0x82
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d113      	bne.n	80038ac <HAL_SPI_Receive+0x4c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10f      	bne.n	80038ac <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	225d      	movs	r2, #93	; 0x5d
 8003890:	2104      	movs	r1, #4
 8003892:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	881c      	ldrh	r4, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	0023      	movs	r3, r4
 80038a4:	f000 f928 	bl	8003af8 <HAL_SPI_TransmitReceive>
 80038a8:	0003      	movs	r3, r0
 80038aa:	e11c      	b.n	8003ae6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	225c      	movs	r2, #92	; 0x5c
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_Receive+0x5a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e115      	b.n	8003ae6 <HAL_SPI_Receive+0x286>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	225c      	movs	r2, #92	; 0x5c
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c2:	f7fd faa7 	bl	8000e14 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	225d      	movs	r2, #93	; 0x5d
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d004      	beq.n	80038e0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80038d6:	2317      	movs	r3, #23
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2202      	movs	r2, #2
 80038dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80038de:	e0f7      	b.n	8003ad0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_SPI_Receive+0x8e>
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80038ee:	2317      	movs	r3, #23
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80038f6:	e0eb      	b.n	8003ad0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	225d      	movs	r2, #93	; 0x5d
 80038fc:	2104      	movs	r1, #4
 80038fe:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1dba      	adds	r2, r7, #6
 8003910:	2144      	movs	r1, #68	; 0x44
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	2146      	movs	r1, #70	; 0x46
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	23e0      	movs	r3, #224	; 0xe0
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	429a      	cmp	r2, r3
 8003948:	d908      	bls.n	800395c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4966      	ldr	r1, [pc, #408]	; (8003af0 <HAL_SPI_Receive+0x290>)
 8003956:	400a      	ands	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e008      	b.n	800396e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	0149      	lsls	r1, r1, #5
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	429a      	cmp	r2, r3
 8003978:	d10f      	bne.n	800399a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2140      	movs	r1, #64	; 0x40
 8003986:	438a      	bics	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4957      	ldr	r1, [pc, #348]	; (8003af4 <HAL_SPI_Receive+0x294>)
 8003996:	400a      	ands	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d007      	beq.n	80039b8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	23e0      	movs	r3, #224	; 0xe0
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d900      	bls.n	80039c6 <HAL_SPI_Receive+0x166>
 80039c4:	e069      	b.n	8003a9a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039c6:	e031      	b.n	8003a2c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2201      	movs	r2, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d117      	bne.n	8003a06 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	001a      	movs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2246      	movs	r2, #70	; 0x46
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b299      	uxth	r1, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2246      	movs	r2, #70	; 0x46
 8003a02:	5299      	strh	r1, [r3, r2]
 8003a04:	e012      	b.n	8003a2c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	f7fd fa05 	bl	8000e14 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d802      	bhi.n	8003a1c <HAL_SPI_Receive+0x1bc>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Receive+0x1c2>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003a22:	2317      	movs	r3, #23
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2203      	movs	r2, #3
 8003a28:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a2a:	e051      	b.n	8003ad0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2246      	movs	r2, #70	; 0x46
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1c7      	bne.n	80039c8 <HAL_SPI_Receive+0x168>
 8003a38:	e035      	b.n	8003aa6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d115      	bne.n	8003a74 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2246      	movs	r2, #70	; 0x46
 8003a64:	5a9b      	ldrh	r3, [r3, r2]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b299      	uxth	r1, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2246      	movs	r2, #70	; 0x46
 8003a70:	5299      	strh	r1, [r3, r2]
 8003a72:	e012      	b.n	8003a9a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a74:	f7fd f9ce 	bl	8000e14 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <HAL_SPI_Receive+0x22a>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_Receive+0x230>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003a90:	2317      	movs	r3, #23
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2203      	movs	r2, #3
 8003a96:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a98:	e01a      	b.n	8003ad0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2246      	movs	r2, #70	; 0x46
 8003a9e:	5a9b      	ldrh	r3, [r3, r2]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1c9      	bne.n	8003a3a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fdd1 	bl	8004654 <SPI_EndRxTransaction>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003ac4:	2317      	movs	r3, #23
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e000      	b.n	8003ad0 <HAL_SPI_Receive+0x270>
  }

error :
 8003ace:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	225d      	movs	r2, #93	; 0x5d
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	225c      	movs	r2, #92	; 0x5c
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ae0:	2317      	movs	r3, #23
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b007      	add	sp, #28
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	ffffefff 	.word	0xffffefff
 8003af4:	ffffbfff 	.word	0xffffbfff

08003af8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	001a      	movs	r2, r3
 8003b06:	1cbb      	adds	r3, r7, #2
 8003b08:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b0e:	2323      	movs	r3, #35	; 0x23
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	225c      	movs	r2, #92	; 0x5c
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x2c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e1b5      	b.n	8003e90 <HAL_SPI_TransmitReceive+0x398>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	225c      	movs	r2, #92	; 0x5c
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2c:	f7fd f972 	bl	8000e14 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b34:	201b      	movs	r0, #27
 8003b36:	183b      	adds	r3, r7, r0
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	215d      	movs	r1, #93	; 0x5d
 8003b3c:	5c52      	ldrb	r2, [r2, r1]
 8003b3e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b46:	2312      	movs	r3, #18
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	1cba      	adds	r2, r7, #2
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d011      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x84>
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	2382      	movs	r3, #130	; 0x82
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d107      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x7a>
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d004      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003b72:	2323      	movs	r3, #35	; 0x23
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b7a:	e17e      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x98>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x98>
 8003b88:	1cbb      	adds	r3, r7, #2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003b90:	2323      	movs	r3, #35	; 0x23
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b98:	e16f      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	225d      	movs	r2, #93	; 0x5d
 8003b9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	225d      	movs	r2, #93	; 0x5d
 8003baa:	2105      	movs	r1, #5
 8003bac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1cba      	adds	r2, r7, #2
 8003bbe:	2146      	movs	r1, #70	; 0x46
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1cba      	adds	r2, r7, #2
 8003bc8:	2144      	movs	r1, #68	; 0x44
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1cba      	adds	r2, r7, #2
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1cba      	adds	r2, r7, #2
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	23e0      	movs	r3, #224	; 0xe0
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d908      	bls.n	8003c0e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	49a4      	ldr	r1, [pc, #656]	; (8003e98 <HAL_SPI_TransmitReceive+0x3a0>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	e008      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0149      	lsls	r1, r1, #5
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d007      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	23e0      	movs	r3, #224	; 0xe0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d800      	bhi.n	8003c4c <HAL_SPI_TransmitReceive+0x154>
 8003c4a:	e07f      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x168>
 8003c54:	2312      	movs	r3, #18
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d000      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x168>
 8003c5e:	e069      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	1c9a      	adds	r2, r3, #2
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c84:	e056      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d11b      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x1d4>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x1d4>
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d113      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d11c      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x21c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2246      	movs	r2, #70	; 0x46
 8003cde:	5a9b      	ldrh	r3, [r3, r2]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	1c9a      	adds	r2, r3, #2
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2246      	movs	r2, #70	; 0x46
 8003d02:	5a9b      	ldrh	r3, [r3, r2]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2246      	movs	r2, #70	; 0x46
 8003d0e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d14:	f7fd f87e 	bl	8000e14 <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d807      	bhi.n	8003d34 <HAL_SPI_TransmitReceive+0x23c>
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	3301      	adds	r3, #1
 8003d28:	d004      	beq.n	8003d34 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003d2a:	2323      	movs	r3, #35	; 0x23
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2203      	movs	r2, #3
 8003d30:	701a      	strb	r2, [r3, #0]
        goto error;
 8003d32:	e0a2      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1a3      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x18e>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2246      	movs	r2, #70	; 0x46
 8003d42:	5a9b      	ldrh	r3, [r3, r2]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d19d      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x18e>
 8003d4a:	e085      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x268>
 8003d54:	2312      	movs	r3, #18
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d000      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x268>
 8003d5e:	e070      	b.n	8003e42 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d86:	e05c      	b.n	8003e42 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d11c      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d8>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d017      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d8>
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d114      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d11e      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x324>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2246      	movs	r2, #70	; 0x46
 8003de2:	5a9b      	ldrh	r3, [r3, r2]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	001a      	movs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2246      	movs	r2, #70	; 0x46
 8003e0a:	5a9b      	ldrh	r3, [r3, r2]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b299      	uxth	r1, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2246      	movs	r2, #70	; 0x46
 8003e16:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e1c:	f7fc fffa 	bl	8000e14 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d802      	bhi.n	8003e32 <HAL_SPI_TransmitReceive+0x33a>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	3301      	adds	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x340>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003e38:	2323      	movs	r3, #35	; 0x23
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003e40:	e01b      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d19d      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x290>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2246      	movs	r2, #70	; 0x46
 8003e50:	5a9b      	ldrh	r3, [r3, r2]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d197      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 fc56 	bl	8004710 <SPI_EndRxTxTransaction>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003e68:	2323      	movs	r3, #35	; 0x23
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	661a      	str	r2, [r3, #96]	; 0x60
 8003e76:	e000      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003e78:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	225d      	movs	r2, #93	; 0x5d
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	225c      	movs	r2, #92	; 0x5c
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e8a:	2323      	movs	r3, #35	; 0x23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781b      	ldrb	r3, [r3, #0]
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b00a      	add	sp, #40	; 0x28
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	ffffefff 	.word	0xffffefff

08003e9c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	001a      	movs	r2, r3
 8003eaa:	1cbb      	adds	r3, r7, #2
 8003eac:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eae:	2317      	movs	r3, #23
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	225c      	movs	r2, #92	; 0x5c
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_SPI_TransmitReceive_DMA+0x28>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e186      	b.n	80041d2 <HAL_SPI_TransmitReceive_DMA+0x336>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	225c      	movs	r2, #92	; 0x5c
 8003ec8:	2101      	movs	r1, #1
 8003eca:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ecc:	2016      	movs	r0, #22
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	215d      	movs	r1, #93	; 0x5d
 8003ed4:	5c52      	ldrb	r2, [r2, r1]
 8003ed6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003ede:	0001      	movs	r1, r0
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d011      	beq.n	8003f0c <HAL_SPI_TransmitReceive_DMA+0x70>
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	2382      	movs	r3, #130	; 0x82
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d107      	bne.n	8003f02 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_SPI_TransmitReceive_DMA+0x66>
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d004      	beq.n	8003f0c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8003f02:	2317      	movs	r3, #23
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2202      	movs	r2, #2
 8003f08:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f0a:	e15b      	b.n	80041c4 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003f18:	1cbb      	adds	r3, r7, #2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8003f20:	2317      	movs	r3, #23
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f28:	e14c      	b.n	80041c4 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	225d      	movs	r2, #93	; 0x5d
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	225d      	movs	r2, #93	; 0x5d
 8003f3a:	2105      	movs	r1, #5
 8003f3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1cba      	adds	r2, r7, #2
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1cba      	adds	r2, r7, #2
 8003f56:	8812      	ldrh	r2, [r2, #0]
 8003f58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1cba      	adds	r2, r7, #2
 8003f64:	2144      	movs	r1, #68	; 0x44
 8003f66:	8812      	ldrh	r2, [r2, #0]
 8003f68:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1cba      	adds	r2, r7, #2
 8003f6e:	2146      	movs	r1, #70	; 0x46
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4994      	ldr	r1, [pc, #592]	; (80041dc <HAL_SPI_TransmitReceive_DMA+0x340>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	23e0      	movs	r3, #224	; 0xe0
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d908      	bls.n	8003fae <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	498e      	ldr	r1, [pc, #568]	; (80041e0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	e074      	b.n	8004098 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0149      	lsls	r1, r1, #5
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d127      	bne.n	800401e <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d10f      	bne.n	8003ffa <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	497f      	ldr	r1, [pc, #508]	; (80041e4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ff8:	e011      	b.n	800401e <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	01c9      	lsls	r1, r1, #7
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	b29b      	uxth	r3, r3
 8004016:	3301      	adds	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	429a      	cmp	r2, r3
 800402a:	d135      	bne.n	8004098 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	496a      	ldr	r1, [pc, #424]	; (80041e0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8004038:	400a      	ands	r2, r1
 800403a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2246      	movs	r2, #70	; 0x46
 8004040:	5a9b      	ldrh	r3, [r3, r2]
 8004042:	b29b      	uxth	r3, r3
 8004044:	001a      	movs	r2, r3
 8004046:	2301      	movs	r3, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4964      	ldr	r1, [pc, #400]	; (80041e8 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8004058:	400a      	ands	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2246      	movs	r2, #70	; 0x46
 8004060:	5a9b      	ldrh	r3, [r3, r2]
 8004062:	b29b      	uxth	r3, r3
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b299      	uxth	r1, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2246      	movs	r2, #70	; 0x46
 800406c:	5299      	strh	r1, [r3, r2]
 800406e:	e013      	b.n	8004098 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0189      	lsls	r1, r1, #6
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2246      	movs	r2, #70	; 0x46
 8004086:	5a9b      	ldrh	r3, [r3, r2]
 8004088:	b29b      	uxth	r3, r3
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	b299      	uxth	r1, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2246      	movs	r2, #70	; 0x46
 8004096:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	225d      	movs	r2, #93	; 0x5d
 800409c:	5c9b      	ldrb	r3, [r3, r2]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d108      	bne.n	80040b6 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	4a50      	ldr	r2, [pc, #320]	; (80041ec <HAL_SPI_TransmitReceive_DMA+0x350>)
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	4a4f      	ldr	r2, [pc, #316]	; (80041f0 <HAL_SPI_TransmitReceive_DMA+0x354>)
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80040b4:	e007      	b.n	80040c6 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	4a4e      	ldr	r2, [pc, #312]	; (80041f4 <HAL_SPI_TransmitReceive_DMA+0x358>)
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	4a4d      	ldr	r2, [pc, #308]	; (80041f8 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a4c      	ldr	r2, [pc, #304]	; (80041fc <HAL_SPI_TransmitReceive_DMA+0x360>)
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	2200      	movs	r2, #0
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	0019      	movs	r1, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2246      	movs	r2, #70	; 0x46
 80040ec:	5a9b      	ldrh	r3, [r3, r2]
 80040ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040f0:	0022      	movs	r2, r4
 80040f2:	f7fe f83f 	bl	8002174 <HAL_DMA_Start_IT>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d00e      	beq.n	8004118 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	2210      	movs	r2, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004106:	2317      	movs	r3, #23
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	225d      	movs	r2, #93	; 0x5d
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
    goto error;
 8004116:	e055      	b.n	80041c4 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2101      	movs	r1, #1
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	2200      	movs	r2, #0
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2200      	movs	r2, #0
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	0019      	movs	r1, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004160:	f7fe f808 	bl	8002174 <HAL_DMA_Start_IT>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d00e      	beq.n	8004186 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416c:	2210      	movs	r2, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004174:	2317      	movs	r3, #23
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	225d      	movs	r2, #93	; 0x5d
 8004180:	2101      	movs	r1, #1
 8004182:	5499      	strb	r1, [r3, r2]
    goto error;
 8004184:	e01e      	b.n	80041c4 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	4013      	ands	r3, r2
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d007      	beq.n	80041a4 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2140      	movs	r1, #64	; 0x40
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2120      	movs	r1, #32
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2102      	movs	r1, #2
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	225c      	movs	r2, #92	; 0x5c
 80041c8:	2100      	movs	r1, #0
 80041ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041cc:	2317      	movs	r3, #23
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	781b      	ldrb	r3, [r3, #0]
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b007      	add	sp, #28
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	ffff9fff 	.word	0xffff9fff
 80041e0:	ffffefff 	.word	0xffffefff
 80041e4:	ffffbfff 	.word	0xffffbfff
 80041e8:	ffffdfff 	.word	0xffffdfff
 80041ec:	08004377 	.word	0x08004377
 80041f0:	08004231 	.word	0x08004231
 80041f4:	08004395 	.word	0x08004395
 80041f8:	080042e1 	.word	0x080042e1
 80041fc:	080043b3 	.word	0x080043b3

08004200 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800423e:	f7fc fde9 	bl	8000e14 <HAL_GetTick>
 8004242:	0003      	movs	r3, r0
 8004244:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2220      	movs	r2, #32
 800424e:	4013      	ands	r3, r2
 8004250:	2b20      	cmp	r3, #32
 8004252:	d03e      	beq.n	80042d2 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2120      	movs	r1, #32
 8004260:	438a      	bics	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10e      	bne.n	800428a <SPI_DMAReceiveCplt+0x5a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	2382      	movs	r3, #130	; 0x82
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	429a      	cmp	r2, r3
 8004276:	d108      	bne.n	800428a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2103      	movs	r1, #3
 8004284:	438a      	bics	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
 8004288:	e007      	b.n	800429a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	438a      	bics	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 f9d7 	bl	8004654 <SPI_EndRxTransaction>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d002      	beq.n	80042b0 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2246      	movs	r2, #70	; 0x46
 80042b4:	2100      	movs	r1, #0
 80042b6:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	225d      	movs	r2, #93	; 0x5d
 80042bc:	2101      	movs	r1, #1
 80042be:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7fb ffb2 	bl	8000234 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80042d0:	e003      	b.n	80042da <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff ff93 	bl	8004200 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}

080042e0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ee:	f7fc fd91 	bl	8000e14 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2220      	movs	r2, #32
 80042fe:	4013      	ands	r3, r2
 8004300:	2b20      	cmp	r3, #32
 8004302:	d031      	beq.n	8004368 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2120      	movs	r1, #32
 8004310:	438a      	bics	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9f8 	bl	8004710 <SPI_EndRxTxTransaction>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d005      	beq.n	8004330 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004328:	2220      	movs	r2, #32
 800432a:	431a      	orrs	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2103      	movs	r1, #3
 800433c:	438a      	bics	r2, r1
 800433e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2246      	movs	r2, #70	; 0x46
 800434a:	2100      	movs	r1, #0
 800434c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	225d      	movs	r2, #93	; 0x5d
 8004352:	2101      	movs	r1, #1
 8004354:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0018      	movs	r0, r3
 8004362:	f7fb ff67 	bl	8000234 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004366:	e003      	b.n	8004370 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	0018      	movs	r0, r3
 800436c:	f7fb ff54 	bl	8000218 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004370:	46bd      	mov	sp, r7
 8004372:	b004      	add	sp, #16
 8004374:	bd80      	pop	{r7, pc}

08004376 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff ff42 	bl	8004210 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}

08004394 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff ff3b 	bl	8004220 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2103      	movs	r1, #3
 80043cc:	438a      	bics	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	2210      	movs	r2, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	225d      	movs	r2, #93	; 0x5d
 80043e0:	2101      	movs	r1, #1
 80043e2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7fb ff24 	bl	8000234 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004404:	f7fc fd06 	bl	8000e14 <HAL_GetTick>
 8004408:	0002      	movs	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	18d3      	adds	r3, r2, r3
 8004412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004414:	f7fc fcfe 	bl	8000e14 <HAL_GetTick>
 8004418:	0003      	movs	r3, r0
 800441a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800441c:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	015b      	lsls	r3, r3, #5
 8004422:	0d1b      	lsrs	r3, r3, #20
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	4353      	muls	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800442a:	e058      	b.n	80044de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	d055      	beq.n	80044de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004432:	f7fc fcef 	bl	8000e14 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d902      	bls.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d142      	bne.n	80044ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	21e0      	movs	r1, #224	; 0xe0
 8004454:	438a      	bics	r2, r1
 8004456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	2382      	movs	r3, #130	; 0x82
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	429a      	cmp	r2, r3
 8004462:	d113      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	429a      	cmp	r2, r3
 800446e:	d005      	beq.n	800447c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2140      	movs	r1, #64	; 0x40
 8004488:	438a      	bics	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	429a      	cmp	r2, r3
 8004496:	d110      	bne.n	80044ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	491a      	ldr	r1, [pc, #104]	; (800450c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0189      	lsls	r1, r1, #6
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	225d      	movs	r2, #93	; 0x5d
 80044be:	2101      	movs	r1, #1
 80044c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	225c      	movs	r2, #92	; 0x5c
 80044c6:	2100      	movs	r1, #0
 80044c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e017      	b.n	80044fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3b01      	subs	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	425a      	negs	r2, r3
 80044ee:	4153      	adcs	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d197      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b008      	add	sp, #32
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000004 	.word	0x20000004
 800450c:	ffffdfff 	.word	0xffffdfff

08004510 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800451e:	2317      	movs	r3, #23
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004526:	f7fc fc75 	bl	8000e14 <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004536:	f7fc fc6d 	bl	8000e14 <HAL_GetTick>
 800453a:	0003      	movs	r3, r0
 800453c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	0013      	movs	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	189b      	adds	r3, r3, r2
 8004550:	00da      	lsls	r2, r3, #3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	0d1b      	lsrs	r3, r3, #20
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	4353      	muls	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800455c:	e068      	b.n	8004630 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	23c0      	movs	r3, #192	; 0xc0
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	429a      	cmp	r2, r3
 8004566:	d10a      	bne.n	800457e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	2117      	movs	r1, #23
 8004576:	187b      	adds	r3, r7, r1
 8004578:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800457a:	187b      	adds	r3, r7, r1
 800457c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	d055      	beq.n	8004630 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004584:	f7fc fc46 	bl	8000e14 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	429a      	cmp	r2, r3
 8004592:	d902      	bls.n	800459a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d142      	bne.n	8004620 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	21e0      	movs	r1, #224	; 0xe0
 80045a6:	438a      	bics	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	2382      	movs	r3, #130	; 0x82
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d113      	bne.n	80045de <SPI_WaitFifoStateUntilTimeout+0xce>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	429a      	cmp	r2, r3
 80045c0:	d005      	beq.n	80045ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d107      	bne.n	80045de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	019b      	lsls	r3, r3, #6
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d110      	bne.n	800460c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4916      	ldr	r1, [pc, #88]	; (8004650 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	0189      	lsls	r1, r1, #6
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	225d      	movs	r2, #93	; 0x5d
 8004610:	2101      	movs	r1, #1
 8004612:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	225c      	movs	r2, #92	; 0x5c
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e010      	b.n	8004642 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3b01      	subs	r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d18e      	bne.n	800455e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b00a      	add	sp, #40	; 0x28
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	20000004 	.word	0x20000004
 8004650:	ffffdfff 	.word	0xffffdfff

08004654 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	2382      	movs	r3, #130	; 0x82
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	429a      	cmp	r2, r3
 800466a:	d113      	bne.n	8004694 <SPI_EndRxTransaction+0x40>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	429a      	cmp	r2, r3
 8004676:	d005      	beq.n	8004684 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2140      	movs	r1, #64	; 0x40
 8004690:	438a      	bics	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	0013      	movs	r3, r2
 800469e:	2200      	movs	r2, #0
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	f7ff fea7 	bl	80043f4 <SPI_WaitFlagStateUntilTimeout>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d007      	beq.n	80046ba <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	2220      	movs	r2, #32
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e026      	b.n	8004708 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	2382      	movs	r3, #130	; 0x82
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d11f      	bne.n	8004706 <SPI_EndRxTransaction+0xb2>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d005      	beq.n	80046de <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	429a      	cmp	r2, r3
 80046dc:	d113      	bne.n	8004706 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	23c0      	movs	r3, #192	; 0xc0
 80046e2:	00d9      	lsls	r1, r3, #3
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	0013      	movs	r3, r2
 80046ec:	2200      	movs	r2, #0
 80046ee:	f7ff ff0f 	bl	8004510 <SPI_WaitFifoStateUntilTimeout>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d007      	beq.n	8004706 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	2220      	movs	r2, #32
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e000      	b.n	8004708 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b004      	add	sp, #16
 800470e:	bd80      	pop	{r7, pc}

08004710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	23c0      	movs	r3, #192	; 0xc0
 8004720:	0159      	lsls	r1, r3, #5
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	0013      	movs	r3, r2
 800472a:	2200      	movs	r2, #0
 800472c:	f7ff fef0 	bl	8004510 <SPI_WaitFifoStateUntilTimeout>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d007      	beq.n	8004744 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	2220      	movs	r2, #32
 800473a:	431a      	orrs	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e027      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	0013      	movs	r3, r2
 800474e:	2200      	movs	r2, #0
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	f7ff fe4f 	bl	80043f4 <SPI_WaitFlagStateUntilTimeout>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d007      	beq.n	800476a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	2220      	movs	r2, #32
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e014      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	23c0      	movs	r3, #192	; 0xc0
 800476e:	00d9      	lsls	r1, r3, #3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	0013      	movs	r3, r2
 8004778:	2200      	movs	r2, #0
 800477a:	f7ff fec9 	bl	8004510 <SPI_WaitFifoStateUntilTimeout>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d007      	beq.n	8004792 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	2220      	movs	r2, #32
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e000      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}

0800479c <__libc_init_array>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	2600      	movs	r6, #0
 80047a0:	4d0c      	ldr	r5, [pc, #48]	; (80047d4 <__libc_init_array+0x38>)
 80047a2:	4c0d      	ldr	r4, [pc, #52]	; (80047d8 <__libc_init_array+0x3c>)
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	42a6      	cmp	r6, r4
 80047aa:	d109      	bne.n	80047c0 <__libc_init_array+0x24>
 80047ac:	2600      	movs	r6, #0
 80047ae:	f000 f821 	bl	80047f4 <_init>
 80047b2:	4d0a      	ldr	r5, [pc, #40]	; (80047dc <__libc_init_array+0x40>)
 80047b4:	4c0a      	ldr	r4, [pc, #40]	; (80047e0 <__libc_init_array+0x44>)
 80047b6:	1b64      	subs	r4, r4, r5
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	42a6      	cmp	r6, r4
 80047bc:	d105      	bne.n	80047ca <__libc_init_array+0x2e>
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	00b3      	lsls	r3, r6, #2
 80047c2:	58eb      	ldr	r3, [r5, r3]
 80047c4:	4798      	blx	r3
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7ee      	b.n	80047a8 <__libc_init_array+0xc>
 80047ca:	00b3      	lsls	r3, r6, #2
 80047cc:	58eb      	ldr	r3, [r5, r3]
 80047ce:	4798      	blx	r3
 80047d0:	3601      	adds	r6, #1
 80047d2:	e7f2      	b.n	80047ba <__libc_init_array+0x1e>
 80047d4:	08004888 	.word	0x08004888
 80047d8:	08004888 	.word	0x08004888
 80047dc:	08004888 	.word	0x08004888
 80047e0:	0800488c 	.word	0x0800488c

080047e4 <memset>:
 80047e4:	0003      	movs	r3, r0
 80047e6:	1882      	adds	r2, r0, r2
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d100      	bne.n	80047ee <memset+0xa>
 80047ec:	4770      	bx	lr
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	e7f9      	b.n	80047e8 <memset+0x4>

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
